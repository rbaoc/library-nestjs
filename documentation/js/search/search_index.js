var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.476,1,2.602]],["body/controllers/AppController.html",[0,2.504,1,4.415,2,2.07,3,0.293,4,0.262,5,0.262,6,4.495,7,0.641,8,2.053,9,7.235,10,1.618,11,0.018,12,0.899,13,5.229,14,1.697,15,2.264,16,0.324,17,0.947,18,0.293,19,0.192,20,1.697,21,5.229,22,0.013,23,0.015,24,0.013]],["title/modules/AppModule.html",[25,1.334,26,2.602]],["body/modules/AppModule.html",[1,3.994,2,1.983,3,0.204,4,0.183,5,0.183,11,0.019,16,0.451,17,0.66,18,0.204,19,0.134,22,0.009,23,0.012,24,0.009,25,2.049,26,5.197,27,1.695,28,1.796,29,2.033,30,2.033,31,1.796,32,2.793,33,2.033,34,3.134,35,3.134,36,4.29,37,3.983,38,4.29,39,4.29,40,3.983,41,3.721,42,2.793,43,2.033,44,1.907,45,3.646,46,2.793,47,5.009,48,5.009,49,3.646,50,3.134,51,3.646,52,3.646,53,3.496,54,2.796,55,3.646,56,2.796,57,3.646,58,3.134,59,2.176,60,3.646,61,3.134,62,3.496,63,3.646,64,3.646,65,5.009,66,5.009]],["title/controllers/AuthController.html",[0,1.476,67,2.602]],["body/controllers/AuthController.html",[0,1.2,2,1.2,3,0.17,4,0.152,5,0.152,7,0.371,8,1.427,10,1.864,11,0.019,12,1.036,14,1.956,16,0.419,17,0.549,18,0.17,19,0.111,20,1.842,22,0.007,23,0.011,24,0.007,67,3.069,68,2.605,69,1.948,70,2.605,71,4.397,72,2.649,73,3.779,74,3.779,75,4.397,76,4.447,77,3.031,78,4.333,79,3.031,80,3.031,81,2.054,82,1.399,83,0.88,84,1.333,85,4.269,86,3.031,87,3.031,88,3.031,89,3.031,90,3.031,91,3.031,92,4.397,93,3.031,94,3.031,95,3.031,96,3.031,97,3.615,98,3.031,99,3.031,100,2.325,101,3.069,102,3.069,103,1.948,104,1.948,105,3.031,106,2.325,107,1.948,108,2.158,109,1.809,110,2.549,111,2.116,112,2.325,113,2.116,114,3.031,115,1.586,116,3.031,117,2.116,118,3.031,119,3.031,120,1.41,121,2.3,122,1.574,123,1.948,124,2.826,125,3.031,126,2.605,127,3.031,128,2.325,129,3.031,130,3.031,131,3.031,132,3.031,133,3.031,134,4.397,135,3.031,136,3.031,137,3.031,138,2.605,139,3.031,140,2.605,141,3.031,142,3.031,143,2.605,144,3.031,145,3.031,146,3.031,147,3.031]],["title/modules/AuthModule.html",[25,1.334,36,2.396]],["body/modules/AuthModule.html",[2,1.938,3,0.197,4,0.177,5,0.177,11,0.019,16,0.444,17,0.638,18,0.197,19,0.129,22,0.009,23,0.012,24,0.009,25,2.013,27,1.639,28,1.736,29,1.965,30,1.965,31,1.736,32,3.135,33,3.135,36,4.886,41,3.682,42,2.729,43,1.965,44,1.844,46,2.729,56,2.704,58,4.207,59,2.104,67,3.924,108,2.755,109,2.104,110,3.565,111,2.46,148,3.03,149,3.03,150,3.03,151,3.525,152,4.245,153,4.245,154,4.245,155,3.525,156,3.416,157,3.525,158,2.704,159,4.894,160,1.844,161,3.525,162,3.525,163,3.525,164,3.525,165,3.525,166,3.525,167,3.525,168,3.525,169,3.525,170,3.525]],["title/injectables/AuthService.html",[110,1.836,171,0.785]],["body/injectables/AuthService.html",[3,0.198,4,0.114,5,0.114,7,0.279,8,1.15,11,0.019,12,1.075,14,1.976,15,2.475,16,0.365,17,0.412,18,0.127,19,0.083,20,2.03,22,0.006,23,0.009,24,0.006,59,1.357,72,2.642,73,3.044,74,3.044,81,2.131,82,1.451,83,0.889,84,1.383,101,1.587,108,2.455,109,1.357,110,1.744,112,1.744,120,1.647,121,2.276,122,1.557,156,3.934,158,1.744,171,0.746,172,0.9,173,1.955,174,3.542,175,3.542,176,3.542,177,3.542,178,3.542,179,3.542,180,1.955,181,5.885,182,2.274,183,3.542,184,2.558,185,2.274,186,3.542,187,4.221,188,2.274,189,1.955,190,1.744,191,3.542,192,2.274,193,3.542,194,2.274,195,3.542,196,2.274,197,3.044,198,2.351,199,3.542,200,4.186,201,2.274,202,3.542,203,2.796,204,2.274,205,2.949,206,3.542,207,2.274,208,3.739,209,2.472,210,1.462,211,1.647,212,1.058,213,3.542,214,1.934,215,2.283,216,3.542,217,2.023,218,1.814,219,2.274,220,1.955,221,2.274,222,2.274,223,1.955,224,1.462,225,2.274,226,2.274,227,2.274,228,1.955,229,3.044,230,2.274,231,1.462,232,1.955,233,1.462,234,1.955,235,2.274,236,2.274,237,3.739,238,1.955,239,1.955,240,3.542,241,3.542,242,1.955,243,3.542,244,2.274,245,2.274,246,1.955,247,2.274,248,2.274,249,2.274,250,3.542,251,2.717,252,2.274,253,2.274]],["title/classes/Book.html",[19,0.137,254,1.555]],["body/classes/Book.html",[3,0.171,4,0.153,5,0.153,7,0.374,10,2.131,11,0.019,12,1.184,15,2.04,16,0.375,18,0.171,19,0.162,22,0.007,23,0.011,24,0.007,82,1.574,83,1.006,84,0.978,190,2.806,254,1.845,255,0.859,256,2.627,257,1.583,258,4.468,259,3.628,260,3.341,261,2.168,262,2.417,263,4.468,264,4.468,265,3.987,266,3.628,267,3.163,268,2.627,269,3.977,270,4.22,271,3.297,272,3.056,273,3.662,274,2.133,275,2.344,276,3.056,277,2.344,278,2.898,279,3.056,280,1.602,281,3.628,282,3.056,283,3.087,284,2.806,285,2.344,286,3.056,287,4.423,288,3.056,289,3.056,290,3.056,291,4.537,292,3.056,293,2.811,294,2.627,295,3.056,296,2.133,297,2.133,298,3.056,299,1.505,300,2.133,301,3.087,302,3.087,303,3.087,304,3.802,305,3.802,306,1.21,307,3.056,308,2.627,309,3.977,310,1.505,311,1.824,312,2.627,313,1.946,314,2.344,315,2.133,316,2.133,317,3.056,318,3.056]],["title/controllers/BookController.html",[0,1.476,319,2.602]],["body/controllers/BookController.html",[0,0.907,2,0.907,3,0.128,4,0.115,5,0.115,7,0.281,8,1.157,10,1.826,11,0.019,12,1.014,14,1.916,16,0.404,17,0.415,18,0.128,19,0.084,20,2.08,22,0.006,23,0.009,24,0.006,69,1.473,72,2.692,78,3.824,81,2.011,82,1.37,83,0.862,84,1.305,85,3.634,100,2.733,101,3.051,102,3.051,103,1.473,104,1.473,115,1.199,122,0.82,123,3.433,124,3.433,128,1.758,198,2.672,211,2.293,212,1.066,214,1.352,215,2.033,217,2.033,218,1.823,254,2.834,261,2.911,280,1.929,306,0.907,319,2.487,320,1.97,321,3.757,322,1.657,323,3.062,324,1.864,325,1.864,326,2.437,327,2.291,328,2.291,329,2.291,330,2.291,331,3.087,332,1.97,333,2.291,334,2.291,335,2.579,336,1.758,337,2.291,338,1.278,339,1.599,340,2.291,341,1.278,342,1.97,343,2.291,344,2.291,345,2.291,346,2.291,347,1.368,348,3.922,349,2.291,350,2.291,351,1.599,352,1.199,353,1.599,354,2.291,355,1.758,356,1.758,357,1.599,358,1.199,359,1.599,360,1.199,361,1.473,362,1.199,363,1.199,364,1.758,365,2.287,366,1.97,367,1.368,368,2.29,369,1.278,370,2.291,371,1.368,372,3.051,373,2.291,374,2.291,375,2.291,376,2.291,377,0.956,378,1.486,379,2.291,380,1.599,381,1.758,382,2.291,383,3.051,384,2.287,385,2.291,386,3.353,387,2.291,388,1.599,389,1.599,390,1.758,391,2.291,392,2.291,393,2.291,394,2.291,395,2.291]],["title/modules/BookModule.html",[25,1.334,37,2.225]],["body/modules/BookModule.html",[2,2.049,3,0.214,4,0.192,5,0.192,11,0.019,16,0.442,17,0.692,18,0.214,19,0.14,22,0.009,23,0.013,24,0.009,25,2.1,27,1.778,28,1.883,29,2.131,30,2.131,31,1.883,32,3.27,33,3.27,37,4.551,40,4.04,41,3.774,42,2.885,43,2.131,44,2,46,2.885,56,2.932,61,3.286,108,2.824,109,2.282,254,1.595,319,4.094,364,2.932,365,3.837,366,3.286,396,3.286,397,3.823,398,3.286,399,3.286,400,3.334,401,3.823,402,3.823,403,3.326,404,1.778,405,2.932,406,3.823]],["title/classes/BookPagination.html",[19,0.137,335,1.95]],["body/classes/BookPagination.html",[3,0.191,4,0.171,5,0.171,7,0.418,10,1.48,11,0.019,12,1.029,16,0.296,18,0.335,19,0.24,22,0.008,23,0.012,24,0.008,83,1.06,84,1.324,255,0.959,257,1.713,280,2.108,310,1.681,313,2.105,335,2.503,377,2.727,378,2.727,407,2.193,408,4.295,409,4.563,410,4.563,411,2.225,412,4.401,413,3.412,414,2.933,415,3.412,416,3.339,417,3.412,418,3.412,419,4.475,420,2.193,421,3.642,422,1.587,423,1.785,424,4.404,425,1.785,426,1.785]],["title/injectables/BookService.html",[171,0.785,365,1.95]],["body/injectables/BookService.html",[3,0.106,4,0.095,5,0.095,7,0.232,8,0.995,11,0.019,12,0.981,14,1.779,16,0.365,17,0.343,18,0.106,19,0.07,20,1.965,22,0.005,23,0.007,24,0.005,72,2.611,81,1.944,82,1.324,83,0.834,84,1.262,108,2.286,109,1.132,120,1.426,121,2.019,122,1.381,171,0.645,172,0.751,184,1.962,198,2.632,211,1.795,212,0.882,214,1.872,215,2.422,217,2.879,218,2.748,224,3.523,254,2.806,261,2.286,262,1.795,271,1.604,280,2.01,284,1.901,293,1.426,306,0.751,321,2.635,322,1.426,323,2.635,324,2.019,325,1.604,326,2.471,331,2.724,335,0.992,338,1.709,341,1.709,347,1.132,348,3.523,352,0.992,362,0.992,363,0.992,364,1.454,365,1.604,367,1.132,368,1.97,369,1.057,377,1.61,378,1.849,384,0.992,400,2.7,404,0.882,405,1.454,414,0.882,427,1.629,428,1.896,429,2.849,430,1.896,431,3.065,432,3.065,433,3.523,434,1.896,435,2.351,436,3.065,437,1.896,438,3.065,439,1.896,440,2.14,441,1.896,442,1.896,443,3.065,444,1.896,445,1.896,446,1.323,447,1.896,448,1.896,449,1.896,450,3.733,451,1.454,452,2.693,453,1.896,454,3.094,455,1.896,456,2.693,457,3.397,458,2.693,459,3.065,460,1.323,461,1.323,462,1.323,463,2.481,464,2.14,465,2.635,466,1.219,467,1.896,468,2.14,469,1.323,470,3.065,471,1.896,472,1.323,473,1.896,474,1.323,475,3.81,476,3.065,477,3.065,478,2.635,479,4.433,480,1.896,481,3.065,482,4.433,483,3.065,484,3.065,485,1.896,486,1.323,487,1.323,488,3.065,489,1.896,490,1.896,491,1.629,492,1.896,493,1.323]],["title/classes/Category.html",[19,0.137,267,1.95]],["body/classes/Category.html",[3,0.183,4,0.164,5,0.164,7,0.402,10,2.053,11,0.019,12,1.141,15,2.106,16,0.364,18,0.183,19,0.171,22,0.008,23,0.011,24,0.008,82,1.624,83,0.97,84,1.028,190,2.291,254,2.591,255,0.921,257,1.665,259,3.773,260,3.474,261,2.591,262,2.514,266,3.773,267,2.433,268,2.817,269,4.336,270,3.773,271,3.472,273,3.781,274,2.288,275,2.514,277,2.514,278,3.28,280,1.307,281,3.773,283,2.288,284,2.291,285,2.514,291,4.106,296,2.288,297,2.288,299,1.614,300,2.288,301,3.246,302,3.246,303,3.246,304,3.997,306,1.298,309,4.106,310,1.614,311,1.956,312,2.817,313,1.442,314,2.514,315,2.288,316,2.288,457,3.773,494,2.817,495,4.65,496,3.277,497,4.65,498,3.997,499,4.65,500,3.277,501,3.277,502,3.277,503,3.277,504,3.277,505,2.817,506,3.277,507,3.277,508,4.65,509,2.817,510,2.817,511,3.277,512,3.277,513,4.65,514,2.817]],["title/controllers/CategoryController.html",[0,1.476,515,2.602]],["body/controllers/CategoryController.html",[0,0.882,2,0.882,3,0.125,4,0.112,5,0.112,7,0.273,8,1.131,10,1.869,11,0.019,12,1.039,14,1.962,16,0.408,17,0.403,18,0.125,19,0.082,20,1.962,22,0.005,23,0.008,24,0.005,69,1.431,72,2.718,81,2.059,82,1.403,83,0.883,84,1.336,100,2.672,102,3.388,103,1.431,104,1.431,115,1.165,122,0.797,123,3.387,124,3.387,128,2.672,198,2.816,211,1.996,212,1.035,214,1.078,215,1.62,217,1.62,218,1.453,254,0.929,261,2.783,267,3.055,280,2.002,306,0.882,322,1.996,324,1.822,325,1.822,326,2.393,331,2.539,332,1.914,336,1.708,338,1.241,339,1.554,341,1.241,342,1.914,347,1.329,351,1.554,352,1.165,353,1.554,355,1.708,357,1.554,358,1.165,359,1.554,360,1.165,361,1.431,362,1.165,363,1.165,367,1.329,368,1.431,369,1.241,371,1.329,372,3.678,377,0.929,378,1.453,380,1.554,381,1.708,383,1.554,384,1.822,386,3.292,388,1.554,389,1.554,390,1.708,425,2.539,433,3.12,457,2.995,465,1.914,515,2.432,516,1.914,517,3.689,518,3.689,519,2.995,520,2.995,521,2.226,522,4.173,523,2.226,524,2.226,525,2.226,526,2.226,527,2.226,528,1.914,529,3.335,530,2.226,531,1.914,532,2.226,533,2.226,534,2.226,535,2.226,536,2.226,537,2.226,538,3.885,539,2.226,540,2.226,541,1.708,542,1.554,543,1.708,544,2.562,545,1.914,546,2.672,547,2.226,548,2.226,549,2.226,550,2.226,551,2.226,552,2.226,553,2.226,554,2.226,555,2.226,556,2.226,557,2.226,558,2.226,559,2.226,560,2.226,561,1.914,562,2.226,563,2.226]],["title/modules/CategoryModule.html",[25,1.334,38,2.396]],["body/modules/CategoryModule.html",[2,2.007,3,0.208,4,0.186,5,0.186,11,0.019,16,0.449,17,0.672,18,0.208,19,0.136,22,0.009,23,0.012,24,0.009,25,2.067,27,1.725,28,1.827,29,2.068,30,2.068,31,1.827,32,3.22,33,3.22,37,4.004,38,4.887,42,2.826,43,2.068,44,1.94,46,2.826,50,3.188,108,2.798,109,2.214,184,1.815,210,2.384,267,1.94,293,2.357,365,3.509,400,3.304,403,3.258,404,1.725,405,2.845,515,4.03,543,2.845,544,4.356,545,3.188,564,3.188,565,3.188,566,3.709,567,3.188,568,3.709,569,3.709,570,3.188,571,3.709,572,3.709]],["title/classes/CategoryPagination.html",[19,0.137,425,1.95]],["body/classes/CategoryPagination.html",[3,0.191,4,0.171,5,0.171,7,0.418,10,1.48,11,0.019,12,1.029,16,0.296,18,0.335,19,0.24,22,0.008,23,0.012,24,0.008,83,1.06,84,1.324,255,0.959,257,1.713,280,2.108,310,1.681,313,2.105,335,1.785,377,2.727,378,2.727,407,2.193,408,4.295,409,4.563,410,4.563,411,2.225,412,4.401,414,2.933,416,3.339,419,4.475,420,2.193,421,3.642,422,1.587,423,1.785,424,4.404,425,2.503,426,1.785,573,3.412,574,3.412,575,3.412,576,3.412]],["title/injectables/CategoryService.html",[171,0.785,544,2.225]],["body/injectables/CategoryService.html",[3,0.097,4,0.087,5,0.087,7,0.213,8,0.927,11,0.019,12,1.011,14,1.855,15,1.301,16,0.364,17,0.315,18,0.097,19,0.064,20,1.855,22,0.004,23,0.007,24,0.004,72,2.657,81,2.004,82,1.477,83,0.859,84,1.3,120,1.327,121,1.493,122,1.022,171,0.601,172,0.688,198,2.654,211,2.735,212,0.808,214,1.706,215,2.657,217,2.803,218,2.613,224,3.672,254,2.203,258,3.996,261,2.301,262,1.957,267,3.375,271,0.909,280,1.985,284,1.79,306,0.688,322,1.327,324,2.201,325,1.493,326,2.346,331,2.201,338,1.591,341,1.591,347,1.037,352,0.909,362,0.909,363,0.909,365,2.763,367,1.037,368,1.117,369,0.968,377,1.516,378,1.755,384,0.909,404,0.808,414,0.808,425,0.909,429,2.705,433,3.213,440,1.992,446,1.212,451,1.332,452,2.536,454,2.937,456,2.536,457,1.992,458,2.536,460,1.212,461,1.212,462,1.212,463,2.988,464,2.937,466,1.117,468,1.212,469,1.212,472,3.686,474,1.212,475,1.493,478,1.493,491,1.493,517,3.123,518,3.123,519,2.453,520,2.453,522,3.123,528,2.453,529,2.983,531,2.453,538,3.395,541,1.332,542,1.212,543,1.332,544,1.704,546,2.189,570,1.493,577,1.493,578,2.854,579,1.737,580,1.737,581,2.854,582,1.737,583,1.737,584,5.281,585,1.737,586,1.737,587,1.737,588,1.737,589,2.854,590,1.737,591,1.737,592,2.854,593,1.737,594,1.737,595,1.737,596,1.737,597,1.737,598,1.737,599,2.453,600,1.493,601,1.737,602,2.854,603,1.737,604,4.208,605,1.737,606,1.737,607,1.737,608,1.737,609,1.737,610,2.854,611,2.854,612,1.737,613,1.737,614,1.737,615,2.854,616,1.737,617,1.737,618,1.737,619,2.854,620,1.737,621,1.737]],["title/classes/CreateBookDto.html",[19,0.137,331,1.95]],["body/classes/CreateBookDto.html",[3,0.226,4,0.202,5,0.202,7,0.495,10,2.07,11,0.018,12,1.15,15,2.301,16,0.374,18,0.226,19,0.197,22,0.01,23,0.013,24,0.01,82,1.4,83,0.978,84,1.521,190,3.166,255,1.136,257,1.922,260,3.877,262,2.805,263,5.184,264,5.184,278,2.253,280,1.51,299,2.645,300,2.82,311,3.205,331,2.809,419,3.452,420,2.597,421,3.362,422,1.879,424,2.597,542,4.801,622,3.099,623,3.473,624,4.04,625,3.748,626,4.04,627,4.04,628,3.099,629,4.04,630,4.04,631,4.04,632,4.21,633,3.877,634,4.626,635,3.473,636,3.099,637,3.099,638,3.473]],["title/classes/CreateCategoryDto.html",[19,0.137,529,2.225]],["body/classes/CreateCategoryDto.html",[3,0.253,4,0.226,5,0.226,7,0.553,10,1.969,11,0.018,12,1.094,15,2.402,16,0.358,18,0.253,19,0.212,22,0.011,23,0.014,24,0.011,82,1.478,83,0.93,84,1.483,190,2.844,255,1.27,257,2.067,260,4.092,262,2.96,278,2.518,299,2.225,311,3.447,421,3.33,422,2.101,529,3.447,623,3.883,625,3.153,628,3.465,632,4.031,633,3.712,634,4.883,635,3.883,636,3.465,637,3.465,638,3.883,639,5.766,640,3.465,641,4.517,642,4.517,643,4.517]],["title/classes/CreateRecordDto.html",[19,0.137,644,2.396]],["body/classes/CreateRecordDto.html",[3,0.229,4,0.205,5,0.205,7,0.502,10,2.079,11,0.019,12,1.155,16,0.376,18,0.229,19,0.199,22,0.01,23,0.013,24,0.01,83,0.982,84,1.527,184,2.174,190,2.669,210,2.633,254,2.88,255,1.151,257,1.94,262,2.824,273,4.154,421,3.38,422,1.905,486,4.238,487,4.238,493,4.238,541,3.142,625,2.859,632,3.782,633,3.903,644,3.483,645,5.935,646,3.142,647,4.096,648,4.096,649,5.418,650,4.096,651,4.096,652,4.096,653,4.096,654,4.096,655,6.072,656,4.096,657,4.096,658,4.096]],["title/classes/CreateUserDto.html",[19,0.137,97,2.078]],["body/classes/CreateUserDto.html",[3,0.226,4,0.202,5,0.202,7,0.494,10,2.068,11,0.018,12,1.149,15,2.55,16,0.332,18,0.226,19,0.197,22,0.01,23,0.013,24,0.01,83,0.977,97,2.988,106,5.272,190,2.64,203,3.872,205,3.151,209,2.812,231,3.872,233,3.872,255,1.133,257,1.919,278,3.358,299,1.985,311,3.832,421,2.804,422,1.874,625,2.812,628,4.111,632,3.741,633,4.297,634,5.127,636,3.091,637,4.111,659,3.091,660,5.177,661,4.029,662,4.029,663,4.029,664,4.029,665,5.36,666,4.029,667,4.029,668,4.029,669,4.029,670,4.029,671,4.029,672,3.463,673,3.463,674,4.029]],["title/modules/DatabaseModule.html",[25,1.334,39,2.396]],["body/modules/DatabaseModule.html",[3,0.276,4,0.247,5,0.247,11,0.019,16,0.429,17,0.894,18,0.276,19,0.181,20,1.602,22,0.012,23,0.015,24,0.012,25,2.186,27,2.295,39,3.924,46,2.752,214,1.527,246,5.248,403,3.172,404,2.295,675,4.935,676,6.105,677,6.629,678,4.935,679,4.935,680,6.105,681,4.935,682,4.935,683,4.935,684,4.935,685,4.935]],["title/classes/ExceptionsFilter.html",[19,0.137,53,2.602]],["body/classes/ExceptionsFilter.html",[3,0.24,4,0.215,5,0.215,7,0.526,8,1.815,11,0.019,12,0.738,14,1.395,15,2.001,16,0.266,17,0.778,18,0.24,19,0.158,22,0.01,23,0.014,24,0.01,53,3.902,54,4.288,81,1.464,82,0.997,83,0.628,84,0.95,211,2.6,212,1.998,214,1.729,218,1.792,255,1.208,280,1.208,463,4.231,686,3.693,687,4.288,688,6.215,689,5.591,690,5.342,691,6.215,692,6.583,693,4.296,694,5.591,695,4.296,696,4.296,697,4.296,698,4.296,699,4.296,700,6.825,701,6.825,702,4.296,703,4.296,704,4.296,705,3.693,706,4.296,707,3.693,708,3.693,709,4.296,710,4.296,711,4.296]],["title/injectables/ExcludeNullInterceptor.html",[171,0.785,712,2.859]],["body/injectables/ExcludeNullInterceptor.html",[3,0.226,4,0.202,5,0.202,7,0.495,8,1.743,11,0.019,12,0.923,14,1.743,16,0.374,17,0.732,18,0.226,19,0.148,20,2.086,22,0.01,23,0.013,24,0.01,81,1.83,82,1.246,83,0.785,84,1.187,138,5.524,171,1.131,172,1.6,411,3.199,687,3.099,690,5.751,712,4.119,713,3.473,714,5.37,715,5.37,716,5.37,717,5.524,718,6.427,719,4.04,720,3.473,721,6.031,722,5.37,723,4.04,724,5.37,725,3.473,726,4.04,727,4.04,728,4.04,729,4.04,730,5.37,731,4.04,732,4.04,733,5.37,734,4.04,735,4.04,736,4.04,737,4.04,738,4.04]],["title/injectables/GoogleAuthGuard.html",[113,2.602,171,0.785]],["body/injectables/GoogleAuthGuard.html",[3,0.308,4,0.276,5,0.276,11,0.018,16,0.404,17,0.996,18,0.308,19,0.202,22,0.013,23,0.016,24,0.013,113,4.55,160,2.876,171,1.372,172,2.177,739,4.726,740,4.218,741,2.294,742,5.498]],["title/injectables/GoogleStrategy.html",[152,2.396,171,0.785]],["body/injectables/GoogleStrategy.html",[3,0.223,4,0.2,5,0.2,7,0.488,8,1.728,11,0.019,12,0.915,14,1.294,15,2.453,16,0.396,17,0.722,18,0.223,19,0.146,20,1.294,22,0.01,23,0.013,24,0.01,59,2.379,72,2.254,81,1.814,82,1.391,83,0.778,84,1.177,120,1.854,122,1.427,152,3.421,156,4.783,160,2.085,171,1.12,172,1.578,180,3.426,197,5.89,198,2.22,205,2.085,214,1.233,217,1.854,218,1.663,228,3.426,229,3.426,231,2.562,232,3.426,233,2.562,234,3.426,251,4.082,371,2.379,741,1.663,743,3.426,744,4.595,745,3.986,746,3.986,747,5.991,748,3.986,749,5.991,750,3.058,751,2.782,752,3.426,753,3.058,754,5.322,755,3.058,756,3.058,757,3.986,758,3.986,759,3.986,760,3.986,761,3.986,762,3.986,763,3.986,764,3.986]],["title/interfaces/IRequest.html",[78,2.225,765,2.602]],["body/interfaces/IRequest.html",[3,0.266,4,0.238,5,0.238,7,0.582,11,0.019,15,2.332,16,0.369,17,0.859,18,0.382,22,0.011,23,0.014,24,0.011,70,4.08,78,3.557,83,0.952,85,4.187,184,2.571,200,3.051,205,3.117,210,3.051,237,4.08,242,4.08,257,2.133,280,1.675,435,3.641,741,2.486,765,3.313,766,4.747,767,3.641,768,5.122,769,4.08]],["title/injectables/JwtAuthGuard.html",[115,1.95,171,0.785]],["body/injectables/JwtAuthGuard.html",[3,0.308,4,0.276,5,0.276,11,0.018,16,0.404,17,0.996,18,0.308,19,0.202,22,0.013,23,0.016,24,0.013,115,3.41,160,2.876,171,1.372,172,2.177,740,4.218,741,2.294,770,4.726,771,5.498]],["title/injectables/JwtStrategy.html",[153,2.396,171,0.785]],["body/injectables/JwtStrategy.html",[3,0.232,4,0.208,5,0.208,7,0.509,8,1.775,11,0.019,12,0.94,14,1.348,16,0.429,17,0.752,18,0.232,19,0.152,20,1.348,22,0.01,23,0.013,24,0.01,59,2.479,72,2.301,81,1.863,82,1.269,83,0.799,84,1.209,110,3.414,111,2.898,112,3.185,120,2.543,121,2.86,122,1.957,153,3.515,156,4.932,160,2.172,171,1.151,172,1.644,200,4.34,284,2.045,741,1.732,744,4.194,750,3.185,751,2.898,753,3.185,755,3.185,756,3.185,772,3.569,773,3.185,774,4.153,775,5.468,776,4.153,777,4.153,778,4.7,779,4.153,780,4.153,781,4.153,782,4.153,783,4.153,784,4.153]],["title/classes/LengthLimits.html",[19,0.137,299,1.836]],["body/classes/LengthLimits.html",[3,0.215,4,0.192,5,0.192,7,0.47,11,0.018,12,1.165,18,0.215,19,0.141,22,0.009,23,0.013,24,0.009,83,0.99,122,2.702,255,1.077,257,1.855,280,1.904,299,2.553,313,3.048,408,4.504,411,3.15,414,2.41,673,4.455,785,3.294,786,5.873,787,5.873,788,5.873,789,5.873,790,5.873,791,5.873,792,5.183,793,3.833,794,3.833,795,3.833,796,5.183,797,3.833,798,5.183,799,3.833,800,5.183,801,3.833,802,6.774]],["title/injectables/LocalAuthGuard.html",[117,2.602,171,0.785]],["body/injectables/LocalAuthGuard.html",[3,0.308,4,0.276,5,0.276,11,0.018,16,0.404,17,0.996,18,0.308,19,0.202,22,0.013,23,0.016,24,0.013,117,4.55,160,2.876,171,1.372,172,2.177,740,4.218,741,2.294,803,4.726,804,5.498]],["title/injectables/LocalStrategy.html",[154,2.396,171,0.785]],["body/injectables/LocalStrategy.html",[3,0.243,4,0.217,5,0.217,7,0.531,8,1.825,11,0.019,12,0.967,14,1.407,15,2.511,16,0.424,17,0.785,18,0.243,19,0.159,20,1.407,22,0.01,23,0.014,24,0.01,72,2.349,81,1.916,82,1.305,83,0.821,84,1.243,110,3.454,111,3.025,120,2.015,122,1.551,154,3.614,160,2.267,171,1.184,172,1.716,184,1.551,198,2.345,203,4.246,205,2.267,210,2.786,371,2.587,741,1.808,744,4.313,750,3.324,751,3.025,753,3.324,755,3.324,756,3.324,773,3.324,805,3.725,806,4.333,807,5.622,808,4.333,809,4.833,810,4.333]],["title/classes/Record.html",[19,0.137,293,1.733]],["body/classes/Record.html",[3,0.168,4,0.15,5,0.15,7,0.368,10,2.122,11,0.019,12,1.179,16,0.35,18,0.168,19,0.16,22,0.007,23,0.011,24,0.007,82,1.631,83,1.002,184,2.149,190,2.15,254,2.762,255,0.844,257,1.563,259,3.591,261,2.146,262,2.392,266,3.591,269,3.047,270,4.371,271,3.276,273,4.257,274,2.094,275,2.302,277,3.348,280,1.761,281,3.591,283,2.094,284,2.15,285,2.302,291,4.371,293,2.03,296,2.094,297,2.094,301,3.047,302,3.047,303,3.047,306,1.188,309,3.943,310,1.478,313,1.32,314,2.302,315,2.094,316,2.094,433,3.307,486,3.591,487,3.591,493,3.591,498,4.422,509,2.579,514,4.855,811,2.579,812,4.422,813,4.365,814,4.365,815,3.001,816,3.001,817,3.752,818,4.365,819,3.001,820,5.649,821,3.001,822,3.001,823,3.001,824,3.001,825,3.001,826,4.365,827,3.001,828,3.001,829,3.001,830,5.144,831,3.001,832,3.001]],["title/controllers/RecordController.html",[0,1.476,833,2.602]],["body/controllers/RecordController.html",[0,1.373,2,1.373,3,0.194,4,0.174,5,0.174,7,0.425,8,1.571,10,1.724,11,0.019,12,0.958,14,1.809,16,0.426,17,0.628,18,0.194,19,0.127,20,1.809,22,0.008,23,0.012,24,0.008,69,2.229,72,2.629,81,1.899,82,1.294,83,0.814,84,1.232,103,2.229,104,2.229,115,1.814,122,1.241,123,2.229,124,3.11,198,2.516,211,2.25,212,1.613,214,1.073,215,1.613,217,1.613,218,1.446,261,2.646,280,1.847,293,3.056,306,1.373,324,2.531,325,2.531,336,2.66,338,1.933,339,2.42,341,1.933,351,2.42,352,1.814,353,2.42,357,2.42,358,1.814,359,2.42,360,1.814,361,2.229,362,1.814,363,1.814,371,2.07,372,2.42,377,1.446,378,2.018,380,2.42,381,2.66,383,2.42,384,1.814,388,2.42,389,2.42,390,2.66,400,2.745,426,3.155,833,3.377,834,2.981,835,4.159,836,3.468,837,3.468,838,3.468,839,3.468,840,3.468,841,2.981,842,2.66,843,3.468,844,3.468,845,3.468,846,3.468,847,3.468]],["title/modules/RecordModule.html",[25,1.334,40,2.225]],["body/modules/RecordModule.html",[2,2.26,3,0.248,4,0.222,5,0.222,11,0.019,16,0.427,17,0.803,18,0.248,19,0.163,22,0.011,23,0.014,24,0.011,25,2.259,27,2.063,28,2.185,29,2.473,30,2.473,31,2.185,32,3.519,33,3.519,40,4.517,42,3.183,43,2.473,44,2.321,46,2.473,293,2.063,400,3.694,403,3.669,404,2.063,833,4.405,841,3.813,842,3.403,848,3.813,849,3.813,850,4.436,851,4.436,852,4.436,853,4.436]],["title/classes/RecordPagination.html",[19,0.137,426,1.95]],["body/classes/RecordPagination.html",[3,0.191,4,0.171,5,0.171,7,0.418,10,1.48,11,0.019,12,1.029,16,0.296,18,0.335,19,0.24,22,0.008,23,0.012,24,0.008,83,1.06,84,1.324,255,0.959,257,1.713,280,2.108,310,1.681,313,2.105,335,1.785,377,2.727,378,2.727,407,2.193,408,4.295,409,4.563,410,4.563,411,2.225,412,4.401,414,2.933,416,3.339,419,4.475,420,2.193,421,3.642,422,1.587,423,1.785,424,4.404,425,1.785,426,2.503,854,3.412,855,3.412,856,3.412,857,3.412]],["title/injectables/RecordService.html",[171,0.785,400,1.836]],["body/injectables/RecordService.html",[3,0.126,4,0.112,5,0.112,7,0.275,8,1.138,11,0.019,12,1.007,14,1.819,16,0.375,17,0.406,18,0.126,19,0.129,20,1.819,22,0.005,23,0.008,24,0.005,72,2.636,81,1.995,82,1.359,83,0.856,84,1.295,120,1.63,121,1.174,122,0.803,171,0.738,172,0.888,198,2.338,211,2.606,212,1.043,214,1.636,215,1.043,217,2.723,218,2.597,224,3.603,261,2.442,262,2.005,265,4.056,267,1.174,271,1.174,280,2.005,284,1.726,293,2.606,306,0.888,322,1.63,324,2.256,325,1.833,326,2.718,338,1.954,341,1.954,347,1.339,352,1.174,362,1.174,363,1.174,367,1.339,369,1.251,377,1.799,378,2.033,384,1.174,400,1.726,404,1.043,414,1.043,422,1.043,426,1.174,429,3.133,433,3.399,435,2.688,440,2.446,446,1.566,450,1.721,451,1.721,452,3.01,454,3.402,456,3.01,458,3.01,460,1.566,461,1.566,462,1.566,463,3.133,464,3.01,466,1.442,468,1.566,469,1.566,472,3.691,474,1.566,487,1.566,493,1.566,633,2.253,644,3.603,812,1.928,835,3.012,842,1.721,858,1.928,859,3.504,860,2.243,861,2.243,862,3.504,863,3.504,864,2.243,865,3.504,866,2.243,867,2.243,868,3.504,869,2.243,870,2.243,871,4.087,872,2.243,873,3.504,874,3.012,875,2.243,876,2.243,877,2.243,878,2.243,879,2.243,880,3.504,881,3.504,882,2.243,883,2.243,884,3.504,885,2.243,886,2.243]],["title/guards/RolesGuard.html",[62,2.602,887,2.859]],["body/guards/RolesGuard.html",[3,0.218,4,0.196,5,0.196,7,0.478,8,1.703,11,0.019,12,0.902,14,1.267,16,0.41,17,0.707,18,0.218,19,0.143,20,1.703,22,0.009,23,0.013,24,0.009,62,3.662,72,2.231,81,1.788,82,1.218,83,0.767,84,1.16,85,2.509,110,3.355,120,2.44,121,2.745,122,1.878,171,1.105,184,1.397,198,2.189,208,3.355,214,2.046,215,1.815,271,2.042,278,2.176,358,2.042,360,2.042,687,2.994,717,5.448,720,3.355,773,2.994,888,3.903,889,3.355,890,6.338,891,6.958,892,3.903,893,5.247,894,3.903,895,3.355,896,3.903,897,2.994,898,3.903,899,3.903,900,5.247,901,3.903,902,3.903,903,3.903,904,3.903,905,3.903,906,3.903,907,3.903,908,5.247,909,3.903,910,3.903,911,3.903]],["title/classes/SignedInUserDto.html",[19,0.137,912,2.859]],["body/classes/SignedInUserDto.html",[3,0.3,4,0.269,5,0.269,11,0.018,16,0.398,18,0.3,19,0.197,22,0.013,23,0.016,24,0.013,97,2.989,107,3.446,203,3.446,205,2.804,214,1.658,255,1.507,322,2.493,741,2.236,912,4.925,913,4.607,914,4.607,915,4.607,916,3.199,917,3.199,918,4.607]],["title/classes/UpdateBookDto.html",[19,0.137,348,2.396]],["body/classes/UpdateBookDto.html",[3,0.3,4,0.269,5,0.269,11,0.018,16,0.398,18,0.3,19,0.197,22,0.013,23,0.016,24,0.013,82,1.244,214,1.658,255,1.507,322,2.493,331,2.804,348,4.127,368,3.446,622,4.112,741,2.236,916,3.199,917,3.199,919,4.607,920,4.112,921,4.925,922,5.36]],["title/classes/UpdateCategoryDto.html",[19,0.137,538,2.396]],["body/classes/UpdateCategoryDto.html",[3,0.3,4,0.269,5,0.269,11,0.018,16,0.398,18,0.3,19,0.197,22,0.013,23,0.016,24,0.013,82,1.244,214,1.658,255,1.507,322,2.493,529,3.199,538,4.127,546,4.112,640,4.112,741,2.236,916,3.199,917,3.199,920,4.112,921,4.925,923,4.607,924,5.36]],["title/classes/UpdateRecordDto.html",[19,0.137,871,2.602]],["body/classes/UpdateRecordDto.html",[3,0.299,4,0.268,5,0.268,11,0.018,16,0.397,18,0.299,19,0.196,22,0.013,23,0.016,24,0.013,214,1.652,254,2.228,255,1.502,322,2.484,486,3.728,644,3.433,646,4.097,741,2.228,871,4.472,874,4.591,916,3.188,917,3.188,920,4.097,921,4.914,925,4.591,926,5.341]],["title/classes/UpdateUserDto.html",[19,0.137,927,2.396]],["body/classes/UpdateUserDto.html",[3,0.299,4,0.268,5,0.268,11,0.018,16,0.397,18,0.299,19,0.196,22,0.013,23,0.016,24,0.013,97,2.978,107,3.433,203,3.433,214,1.652,231,3.433,233,3.433,255,1.502,322,2.484,659,4.097,741,2.228,915,4.591,916,3.188,917,3.188,918,4.591,927,4.118,928,4.591]],["title/classes/User.html",[19,0.137,184,1.334]],["body/classes/User.html",[3,0.164,4,0.147,5,0.147,7,0.358,10,2.075,11,0.019,12,1.188,15,2.354,16,0.368,18,0.164,19,0.157,22,0.007,23,0.01,24,0.007,82,1.488,83,1.01,184,1.533,190,2.11,205,3.107,231,3.818,233,3.818,255,0.822,257,1.533,259,3.538,261,2.114,265,3.888,266,3.538,269,3.895,270,2.99,271,2.652,273,3.587,274,2.041,278,3.666,280,1.204,281,3.538,283,2.041,284,2.11,291,4.332,293,2.762,294,2.514,296,2.041,297,2.041,299,1.44,300,2.041,301,2.99,302,2.99,303,2.99,305,3.682,306,1.158,308,2.514,309,3.895,310,1.44,311,3.025,313,1.885,315,2.99,316,2.041,358,2.652,360,2.652,361,1.88,408,3.025,411,1.36,505,2.514,510,2.514,660,5.106,817,4.357,929,2.514,930,5.069,931,5.94,932,2.924,933,4.283,934,2.924,935,2.924,936,4.283,937,2.924,938,2.924,939,4.283,940,2.924,941,4.283,942,2.924,943,2.924,944,2.924,945,2.924,946,2.924,947,2.924,948,2.924,949,2.924,950,2.924]],["title/controllers/UserController.html",[0,1.476,951,2.602]],["body/controllers/UserController.html",[0,1.053,2,1.053,3,0.149,4,0.133,5,0.133,7,0.326,8,1.296,10,1.648,11,0.019,12,0.916,14,1.729,16,0.413,17,0.481,18,0.149,19,0.098,20,1.729,22,0.006,23,0.01,24,0.006,69,1.709,72,2.58,78,3.977,81,1.815,82,1.236,83,0.778,84,1.178,85,3.853,101,3.718,102,2.786,103,1.709,104,1.709,107,1.709,108,1.999,115,1.391,122,0.952,123,1.709,124,3.08,126,4.119,184,2.146,198,2.5,211,1.856,212,1.236,214,1.648,215,1.236,217,2.477,218,2.222,261,2.891,280,1.839,306,1.053,324,2.507,325,2.507,326,2.672,339,1.856,351,1.856,352,1.391,353,1.856,355,2.039,356,2.039,357,1.856,358,1.391,359,1.856,360,1.391,361,1.709,362,1.391,363,1.391,369,1.482,371,1.587,372,2.786,377,1.109,378,1.665,380,1.856,383,1.856,384,1.391,386,3.676,388,1.856,389,1.856,423,2.786,561,2.285,927,4.111,951,2.786,952,2.285,953,3.431,954,2.659,955,2.659,956,2.659,957,2.659,958,2.659,959,2.659,960,2.659,961,2.659,962,2.659,963,2.659,964,2.659,965,2.285,966,2.039,967,2.285,968,2.659,969,2.659,970,2.659,971,4.792,972,4.792,973,4.792,974,2.659,975,4.792,976,4.792,977,4.792,978,2.659,979,2.659]],["title/modules/UserModule.html",[25,1.334,41,2.078]],["body/modules/UserModule.html",[2,2.26,3,0.248,4,0.222,5,0.222,11,0.019,16,0.427,17,0.803,18,0.248,19,0.163,22,0.011,23,0.014,24,0.011,25,2.259,27,2.063,28,2.185,29,2.473,30,2.473,31,2.185,32,3.519,33,3.519,41,4.22,42,3.183,43,2.473,44,2.321,46,2.473,108,3.129,184,1.588,403,3.669,404,2.063,951,4.405,965,3.813,966,3.403,980,3.813,981,4.436,982,3.813,983,4.436,984,4.436,985,4.436]],["title/classes/UserPagination.html",[19,0.137,423,1.95]],["body/classes/UserPagination.html",[3,0.191,4,0.171,5,0.171,7,0.418,10,1.48,11,0.019,12,1.029,16,0.296,18,0.335,19,0.24,22,0.008,23,0.012,24,0.008,83,1.06,84,1.324,255,0.959,257,1.713,280,2.108,310,1.681,313,2.105,335,1.785,377,2.727,378,2.727,407,2.193,408,4.295,409,4.563,410,4.563,411,2.225,412,4.401,414,2.933,416,3.339,419,4.475,420,2.193,421,3.642,422,1.587,423,2.503,424,4.404,425,1.785,426,1.785,986,3.412,987,3.412,988,3.412,989,3.412]],["title/injectables/UserService.html",[108,1.555,171,0.785]],["body/injectables/UserService.html",[3,0.11,4,0.099,5,0.099,7,0.241,8,1.026,11,0.019,12,1.053,14,1.878,15,1.896,16,0.37,17,0.356,18,0.11,19,0.072,20,1.878,22,0.005,23,0.008,24,0.005,72,2.67,76,3.402,81,2.034,82,1.386,83,0.895,84,1.32,97,2.766,107,2.031,108,1.318,120,1.469,121,1.03,122,1.622,171,0.665,172,0.779,184,2.137,187,2.716,189,1.692,198,2.738,200,3.189,205,2.595,209,2.205,211,2.107,212,0.915,214,1.535,215,1.841,217,2.848,218,2.659,220,1.692,224,3.577,238,1.692,239,1.692,257,1.131,261,2.209,262,0.915,280,1.888,284,0.969,306,0.779,313,0.866,324,2.07,325,1.653,326,2.526,338,1.762,341,1.762,347,1.175,352,1.03,356,1.51,362,1.03,363,1.03,367,1.175,369,1.097,377,1.651,378,1.89,384,1.03,404,0.915,411,0.915,414,0.915,423,1.03,429,2.912,440,2.205,446,1.374,450,3.805,452,2.762,454,3.162,456,2.762,458,2.762,460,1.374,461,1.374,462,1.374,463,2.544,464,3.162,466,1.265,468,1.374,469,1.374,472,2.205,474,1.374,599,1.692,600,1.692,672,1.692,705,1.692,708,2.716,927,3.577,953,2.716,966,1.51,967,1.692,990,1.692,991,3.958,992,3.159,993,3.159,994,1.968,995,1.968,996,3.159,997,1.968,998,3.159,999,1.968,1000,3.159,1001,1.968,1002,3.159,1003,1.968,1004,3.159,1005,1.968,1006,3.159,1007,1.968,1008,1.968,1009,1.968,1010,3.159,1011,1.968,1012,1.968,1013,1.968,1014,1.968,1015,3.159,1016,1.968,1017,1.968,1018,1.968,1019,1.968,1020,1.968,1021,1.968,1022,1.968,1023,1.968,1024,4.961,1025,3.159,1026,3.159,1027,1.968,1028,1.968,1029,1.968,1030,1.968,1031,1.968,1032,1.968,1033,1.968]],["title/coverage.html",[1034,3.901]],["body/coverage.html",[0,2.442,1,2.006,5,0.144,6,2.47,11,0.019,19,0.269,22,0.007,23,0.01,24,0.007,31,1.415,53,2.006,54,2.204,62,2.006,67,2.006,68,2.47,78,1.715,83,0.42,97,1.602,106,2.204,108,1.199,110,1.415,113,2.006,115,1.503,117,2.006,143,2.47,152,1.847,153,1.847,154,1.847,171,1.467,173,2.47,184,1.029,218,1.199,254,1.199,256,2.47,267,1.503,293,1.336,299,1.415,319,2.006,320,2.47,331,1.503,335,1.503,348,1.847,358,1.503,365,1.503,400,1.415,407,3.557,423,1.503,425,1.503,426,1.503,427,2.47,466,4.935,494,2.47,515,2.006,516,2.47,529,1.715,538,1.847,542,2.006,544,1.715,577,2.47,622,3.244,639,2.47,640,3.244,644,1.847,645,2.47,646,3.244,659,3.244,686,2.47,712,2.204,713,2.47,739,2.47,743,2.47,765,2.006,767,2.204,770,2.47,772,2.47,785,2.47,803,2.47,805,2.47,811,2.47,833,2.006,834,2.47,858,2.47,871,2.006,887,2.204,889,2.47,897,2.204,912,2.204,913,2.47,914,2.47,919,2.47,923,2.47,925,2.47,927,1.847,928,2.47,929,2.47,951,2.006,952,2.47,990,2.47,1034,2.204,1035,2.47,1036,2.874,1037,2.874,1038,5.017,1039,5.534,1040,2.874,1041,6.885,1042,5.897,1043,5.017,1044,5.534,1045,4.229,1046,4.229,1047,2.874,1048,2.47,1049,3.635,1050,4.229,1051,5.897,1052,2.874,1053,2.874,1054,2.874]],["title/dependencies.html",[28,2.208,1055,3.113]],["body/dependencies.html",[11,0.019,17,0.849,19,0.217,22,0.011,23,0.014,24,0.011,28,2.309,59,2.798,158,3.595,160,2.452,209,3.271,251,3.595,306,1.856,310,2.309,404,2.18,422,2.18,725,4.029,751,4.746,752,4.029,778,4.029,809,4.029,895,4.029,916,2.798,917,2.798,1056,6.476,1057,4.687,1058,4.687,1059,5.912,1060,5.912,1061,4.687,1062,4.029,1063,4.687,1064,4.687,1065,4.687,1066,4.687,1067,4.687,1068,4.687,1069,4.687,1070,4.687,1071,4.687,1072,4.687,1073,4.687,1074,4.687,1075,4.687,1076,4.687,1077,4.687]],["title/miscellaneous/enumerations.html",[1078,1.629,1079,3.853]],["body/miscellaneous/enumerations.html",[7,0.694,11,0.018,22,0.014,23,0.016,24,0.014,184,2.375,360,3.471,411,3.085,1078,2.964,1079,4.87,1080,5.665,1081,5.665,1082,6.634]],["title/miscellaneous/functions.html",[1078,1.629,1083,3.853]],["body/miscellaneous/functions.html",[7,0.713,11,0.016,22,0.014,23,0.016,24,0.014,31,3.504,1048,5.003,1078,3.045,1083,5.003,1084,5.82]],["title/index.html",[7,0.381,1085,2.676,1086,2.676]],["body/index.html",[4,0.224,11,0.018,22,0.011,23,0.014,24,0.011,140,3.836,260,2.869,429,2.869,707,3.836,1034,3.423,1087,4.463,1088,4.463,1089,5.73,1090,4.463,1091,4.463,1092,4.463,1093,4.463,1094,4.463,1095,6.329,1096,4.463,1097,4.463,1098,7.188,1099,4.463,1100,4.463,1101,4.463,1102,4.463,1103,4.463,1104,5.73,1105,4.463,1106,4.463,1107,4.463,1108,4.463,1109,5.73,1110,5.73,1111,4.463,1112,4.463,1113,4.463,1114,4.925,1115,5.73,1116,4.463,1117,4.463,1118,4.463,1119,4.463,1120,4.463,1121,3.836,1122,4.463,1123,4.463,1124,4.463,1125,4.463,1126,4.463,1127,4.463,1128,4.463,1129,4.463,1130,4.463,1131,4.463,1132,4.463,1133,4.463,1134,4.463,1135,4.463,1136,4.463,1137,4.463,1138,4.463,1139,3.423]],["title/license.html",[1085,2.676,1086,2.676,1139,2.388]],["body/license.html",[11,0.014,22,0.011,23,0.014,24,0.011,44,2.287,223,3.758,1035,3.758,1062,3.758,1114,3.758,1139,3.353,1140,6.267,1141,4.371,1142,4.371,1143,4.371,1144,4.371,1145,5.654,1146,4.371,1147,4.371,1148,4.371,1149,4.371,1150,4.371,1151,4.371,1152,5.654,1153,7.326,1154,4.371,1155,4.371,1156,4.371,1157,6.267,1158,4.371,1159,5.654,1160,4.371,1161,4.371,1162,5.654,1163,4.371,1164,4.371,1165,4.371,1166,4.371,1167,4.371,1168,4.371,1169,4.371,1170,5.654,1171,4.371,1172,4.371,1173,4.371,1174,4.371,1175,4.371,1176,4.371,1177,4.371,1178,5.654,1179,5.654,1180,4.371,1181,4.371,1182,4.371,1183,4.371,1184,4.371,1185,4.371,1186,4.371,1187,4.371,1188,4.371,1189,4.371,1190,4.371,1191,4.371,1192,4.371,1193,4.371,1194,4.371,1195,4.371,1196,4.371,1197,4.371,1198,4.371,1199,4.371,1200,4.371,1201,4.371,1202,4.371,1203,4.371,1204,4.371,1205,4.371,1206,4.371,1207,4.371]],["title/modules.html",[27,2.365]],["body/modules.html",[11,0.015,22,0.013,23,0.015,24,0.013,26,3.675,27,2.449,36,3.385,37,3.143,38,3.385,39,3.385,40,3.143,41,2.936,1121,6.33,1208,7.365,1209,7.365,1210,7.45,1211,5.266,1212,5.266]],["title/overview.html",[1213,4.372]],["body/overview.html",[2,1.248,11,0.019,22,0.008,23,0.011,24,0.008,25,1.129,26,5.033,27,1.466,28,1.553,29,1.758,30,1.758,31,1.553,32,1.758,33,1.758,34,2.71,35,2.71,36,4.793,37,4.436,38,4.759,39,3.401,40,4.234,41,3.99,42,2.522,43,1.758,44,1.649,108,2.893,110,3.232,148,2.71,149,2.71,150,2.71,152,3.401,153,3.401,154,3.401,172,1.248,255,0.886,365,3.511,396,2.71,398,2.71,399,2.71,400,3.366,414,2.104,544,3.916,564,2.71,565,2.71,567,2.71,765,2.201,848,2.71,849,2.71,887,2.418,980,2.71,982,2.71,1213,2.71,1214,3.153,1215,3.153,1216,3.153,1217,3.153]],["title/miscellaneous/typealiases.html",[1078,1.629,1218,4.483]],["body/miscellaneous/typealiases.html",[7,0.681,11,0.016,22,0.013,23,0.016,24,0.013,83,1.054,200,4.218,767,4.265,768,5.64,769,5.64,1078,2.909,1219,5.56,1220,6.98,1221,6.98]],["title/miscellaneous/variables.html",[1078,1.629,1222,3.853]],["body/miscellaneous/variables.html",[7,0.669,11,0.018,15,1.954,22,0.013,23,0.016,24,0.013,83,0.798,313,2.856,358,3.83,360,2.855,411,3.018,897,4.978,1049,4.692,1078,2.855,1222,4.692,1223,6.49,1224,5.458]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":466,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1073,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1065,"title":{},"body":{"dependencies.html":{}}}],["0.2.32",{"_index":1077,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["0.6.3",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1042,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1046,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1047,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1043,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1045,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":414,"title":{},"body":{"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/LengthLimits.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["1.0.0",{"_index":1070,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1010,"title":{},"body":{"injectables/UserService.html":{}}}],["12",{"_index":1216,"title":{},"body":{"overview.html":{}}}],["19",{"_index":1217,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":1068,"title":{},"body":{"dependencies.html":{}}}],["2.2.5",{"_index":1067,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":1142,"title":{},"body":{"license.html":{}}}],["2047",{"_index":792,"title":{},"body":{"classes/LengthLimits.html":{}}}],["255",{"_index":800,"title":{},"body":{"classes/LengthLimits.html":{}}}],["3.0.2",{"_index":1075,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1069,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":412,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{}}}],["5.0.1",{"_index":1063,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1215,"title":{},"body":{"overview.html":{}}}],["64",{"_index":796,"title":{},"body":{"classes/LengthLimits.html":{}}}],["7",{"_index":1214,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":1076,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["72",{"_index":673,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LengthLimits.html":{}}}],["8",{"_index":798,"title":{},"body":{"classes/LengthLimits.html":{}}}],["_record",{"_index":483,"title":{},"body":{"injectables/BookService.html":{}}}],["_request",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["above",{"_index":1177,"title":{},"body":{"license.html":{}}}],["access_token",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IRequest.html":{}}}],["accesstoken",{"_index":749,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["action",{"_index":1201,"title":{},"body":{"license.html":{}}}],["add",{"_index":451,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{}}}],["addnewbooktocategory",{"_index":517,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["addnewbooktocategory(categoryid",{"_index":582,"title":{},"body":{"injectables/CategoryService.html":{}}}],["addnewbooktocategory(id",{"_index":521,"title":{},"body":{"controllers/CategoryController.html":{}}}],["addoldbooktocategory",{"_index":518,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["addoldbooktocategory(categoryid",{"_index":585,"title":{},"body":{"injectables/CategoryService.html":{}}}],["addoldbooktocategory(id",{"_index":525,"title":{},"body":{"controllers/CategoryController.html":{}}}],["admin",{"_index":1082,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["age=${this.configservice.get",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["aliases",{"_index":1219,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":599,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/UserService.html":{}}}],["amazing",{"_index":1122,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":1168,"title":{},"body":{"license.html":{}}}],["andwhere('books.id",{"_index":608,"title":{},"body":{"injectables/CategoryService.html":{}}}],["app",{"_index":1100,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["app_filter",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1094,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":26,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":692,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["arising",{"_index":1205,"title":{},"body":{"license.html":{}}}],["array.isarray(value",{"_index":731,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["asc",{"_index":462,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["associated",{"_index":1154,"title":{},"body":{"license.html":{}}}],["async",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IRequest.html":{}}}],["auth.controller",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth.type",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["authcontroller",{"_index":67,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication=${token",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":740,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('google",{"_index":742,"title":{},"body":{"injectables/GoogleAuthGuard.html":{}}}],["authguard('jwt",{"_index":771,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":804,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":36,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1132,"title":{},"body":{"index.html":{}}}],["authors",{"_index":1194,"title":{},"body":{"license.html":{}}}],["authresponse",{"_index":768,"title":{},"body":{"interfaces/IRequest.html":{},"miscellaneous/typealiases.html":{}}}],["authservice",{"_index":110,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1212,"title":{},"body":{"modules.html":{}}}],["await",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":1123,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":754,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["bcrypt",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.comparesync(plainpassword",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(plainpassword",{"_index":1019,"title":{},"body":{"injectables/UserService.html":{}}}],["big_max_length",{"_index":786,"title":{},"body":{"classes/LengthLimits.html":{}}}],["body",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["body('bookid",{"_index":559,"title":{},"body":{"controllers/CategoryController.html":{}}}],["book",{"_index":254,"title":{"classes/Book.html":{}},"body":{"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateRecordDto.html":{},"classes/Record.html":{},"classes/UpdateRecordDto.html":{},"coverage.html":{}}}],["book's",{"_index":473,"title":{},"body":{"injectables/BookService.html":{}}}],["book.categories",{"_index":511,"title":{},"body":{"classes/Category.html":{}}}],["book.controller",{"_index":402,"title":{},"body":{"modules/BookModule.html":{}}}],["book.dto",{"_index":368,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateBookDto.html":{}}}],["book.dto.ts",{"_index":622,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{},"coverage.html":{}}}],["book.dto.ts:18",{"_index":629,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["book.dto.ts:23",{"_index":624,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["book.dto.ts:28",{"_index":631,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["book.dto.ts:32",{"_index":627,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["book.dto.ts:36",{"_index":626,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["book.entity",{"_index":364,"title":{},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{}}}],["book.isbusy",{"_index":479,"title":{},"body":{"injectables/BookService.html":{}}}],["book.records",{"_index":832,"title":{},"body":{"classes/Record.html":{}}}],["book.service",{"_index":366,"title":{},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{}}}],["book/book.entity",{"_index":509,"title":{},"body":{"classes/Category.html":{},"classes/Record.html":{}}}],["book_id",{"_index":514,"title":{},"body":{"classes/Category.html":{},"classes/Record.html":{}}}],["bookcontroller",{"_index":319,"title":{"controllers/BookController.html":{}},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{},"coverage.html":{}}}],["bookdto",{"_index":522,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["bookid",{"_index":433,"title":{},"body":{"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Record.html":{},"injectables/RecordService.html":{}}}],["bookmodule",{"_index":37,"title":{"modules/BookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["bookpagination",{"_index":335,"title":{"classes/BookPagination.html":{}},"body":{"controllers/BookController.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/CategoryPagination.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{},"coverage.html":{}}}],["bookpagination.default_limit",{"_index":455,"title":{},"body":{"injectables/BookService.html":{}}}],["bookpagination.default_page",{"_index":453,"title":{},"body":{"injectables/BookService.html":{}}}],["bookrepo",{"_index":431,"title":{},"body":{"injectables/BookService.html":{}}}],["books",{"_index":457,"title":{},"body":{"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["books.length",{"_index":465,"title":{},"body":{"injectables/BookService.html":{},"controllers/CategoryController.html":{}}}],["bookservice",{"_index":365,"title":{"injectables/BookService.html":{}},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["boolean",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"classes/Book.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["borrow",{"_index":321,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{}}}],["borrow(request",{"_index":327,"title":{},"body":{"controllers/BookController.html":{}}}],["borrow(userid",{"_index":432,"title":{},"body":{"injectables/BookService.html":{}}}],["borrowed_at",{"_index":818,"title":{},"body":{"classes/Record.html":{}}}],["borrowedat",{"_index":487,"title":{},"body":{"injectables/BookService.html":{},"classes/CreateRecordDto.html":{},"classes/Record.html":{},"injectables/RecordService.html":{}}}],["borrowedbook",{"_index":482,"title":{},"body":{"injectables/BookService.html":{}}}],["borrower",{"_index":486,"title":{},"body":{"injectables/BookService.html":{},"classes/CreateRecordDto.html":{},"classes/Record.html":{},"classes/UpdateRecordDto.html":{}}}],["borrower_id",{"_index":820,"title":{},"body":{"classes/Record.html":{}}}],["borrowerid",{"_index":812,"title":{},"body":{"classes/Record.html":{},"injectables/RecordService.html":{}}}],["browse",{"_index":1210,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1208,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1090,"title":{},"body":{"index.html":{}}}],["c",{"_index":1141,"title":{},"body":{"license.html":{}}}],["callbackurl",{"_index":761,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["callhandler",{"_index":718,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["canactivate",{"_index":890,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":893,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":463,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"classes/ExceptionsFilter.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["catch(exception",{"_index":689,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["categories",{"_index":258,"title":{},"body":{"classes/Book.html":{},"injectables/CategoryService.html":{}}}],["categories.length",{"_index":615,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category",{"_index":267,"title":{"classes/Category.html":{}},"body":{"classes/Book.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"coverage.html":{}}}],["category's",{"_index":621,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.books",{"_index":317,"title":{},"body":{"classes/Book.html":{}}}],["category.books.push(book",{"_index":610,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.controller",{"_index":569,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto",{"_index":546,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":640,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:15",{"_index":643,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:20",{"_index":641,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:24",{"_index":642,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.entity",{"_index":543,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["category.service",{"_index":545,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["category/category.entity",{"_index":307,"title":{},"body":{"classes/Book.html":{}}}],["category_books",{"_index":497,"title":{},"body":{"classes/Category.html":{}}}],["category_id",{"_index":512,"title":{},"body":{"classes/Category.html":{}}}],["categorycontroller",{"_index":515,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categoryid",{"_index":584,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorymodule",{"_index":38,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categorypagination",{"_index":425,"title":{"classes/CategoryPagination.html":{}},"body":{"classes/BookPagination.html":{},"controllers/CategoryController.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{},"coverage.html":{}}}],["categorypagination.default_limit",{"_index":614,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorypagination.default_page",{"_index":613,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categoryrepo",{"_index":581,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categoryservice",{"_index":544,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["charge",{"_index":1149,"title":{},"body":{"license.html":{}}}],["claim",{"_index":1197,"title":{},"body":{"license.html":{}}}],["class",{"_index":19,"title":{"classes/Book.html":{},"classes/BookPagination.html":{},"classes/Category.html":{},"classes/CategoryPagination.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsFilter.html":{},"classes/LengthLimits.html":{},"classes/Record.html":{},"classes/RecordPagination.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserPagination.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":255,"title":{},"body":{"classes/Book.html":{},"classes/BookPagination.html":{},"classes/Category.html":{},"classes/CategoryPagination.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsFilter.html":{},"classes/LengthLimits.html":{},"classes/Record.html":{},"classes/RecordPagination.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserPagination.html":{},"overview.html":{}}}],["clientid",{"_index":757,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":759,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["cluster_appmodule",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_bookmodule",{"_index":396,"title":{},"body":{"modules/BookModule.html":{},"overview.html":{}}}],["cluster_bookmodule_exports",{"_index":398,"title":{},"body":{"modules/BookModule.html":{},"overview.html":{}}}],["cluster_bookmodule_imports",{"_index":397,"title":{},"body":{"modules/BookModule.html":{}}}],["cluster_bookmodule_providers",{"_index":399,"title":{},"body":{"modules/BookModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":564,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_exports",{"_index":565,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":566,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":567,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_recordmodule",{"_index":848,"title":{},"body":{"modules/RecordModule.html":{},"overview.html":{}}}],["cluster_recordmodule_exports",{"_index":849,"title":{},"body":{"modules/RecordModule.html":{},"overview.html":{}}}],["cluster_recordmodule_providers",{"_index":850,"title":{},"body":{"modules/RecordModule.html":{}}}],["cluster_usermodule",{"_index":980,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":982,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":981,"title":{},"body":{"modules/UserModule.html":{}}}],["column",{"_index":291,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["column({default",{"_index":283,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["column({length",{"_index":289,"title":{},"body":{"classes/Book.html":{}}}],["column({name",{"_index":817,"title":{},"body":{"classes/Record.html":{},"classes/User.html":{}}}],["column({nullable",{"_index":277,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{}}}],["column({unique",{"_index":505,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["conditions",{"_index":1176,"title":{},"body":{"license.html":{}}}],["config",{"_index":680,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.entities",{"_index":682,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('google_callback_url",{"_index":762,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('google_client_id",{"_index":758,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('google_client_secret",{"_index":760,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":783,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connection",{"_index":1206,"title":{},"body":{"license.html":{}}}],["console.error(createbookdto",{"_index":374,"title":{},"body":{"controllers/BookController.html":{}}}],["const",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/GoogleStrategy.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constants/length",{"_index":300,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/User.html":{}}}],["constructor",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{}}}],["constructor(bookrepo",{"_index":428,"title":{},"body":{"injectables/BookService.html":{}}}],["constructor(categoryrepo",{"_index":579,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(configservice",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["constructor(private",{"_index":371,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["constructor(recordrepo",{"_index":860,"title":{},"body":{"injectables/RecordService.html":{}}}],["constructor(userrepo",{"_index":994,"title":{},"body":{"injectables/UserService.html":{}}}],["contain",{"_index":555,"title":{},"body":{"controllers/CategoryController.html":{}}}],["context",{"_index":720,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":903,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":902,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":904,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contract",{"_index":1202,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('book",{"_index":370,"title":{},"body":{"controllers/BookController.html":{}}}],["controller('category",{"_index":547,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('record",{"_index":843,"title":{},"body":{"controllers/RecordController.html":{}}}],["controller('user",{"_index":968,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["copies",{"_index":1170,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1152,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1140,"title":{},"body":{"license.html":{}}}],["count",{"_index":469,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["coverage",{"_index":1034,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":322,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{}}}],["create(@req",{"_index":373,"title":{},"body":{"controllers/BookController.html":{}}}],["create(createbookdto",{"_index":436,"title":{},"body":{"injectables/BookService.html":{}}}],["create(createcategorydto",{"_index":528,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createrecorddto",{"_index":863,"title":{},"body":{"injectables/RecordService.html":{}}}],["create(request",{"_index":330,"title":{},"body":{"controllers/BookController.html":{}}}],["createbookdto",{"_index":331,"title":{"classes/CreateBookDto.html":{}},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{},"coverage.html":{}}}],["createcategorydto",{"_index":529,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["created_at",{"_index":315,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["created_at'})@exclude",{"_index":275,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{}}}],["createdat",{"_index":259,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":302,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["createdatecolumn({name",{"_index":274,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["createquerybuilder('category",{"_index":605,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createrecorddto",{"_index":644,"title":{"classes/CreateRecordDto.html":{}},"body":{"classes/CreateRecordDto.html":{},"injectables/RecordService.html":{},"classes/UpdateRecordDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":97,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto[key",{"_index":1016,"title":{},"body":{"injectables/UserService.html":{}}}],["credentials",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":696,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["ctx.getresponse",{"_index":699,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["currentpage",{"_index":452,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["currentuser",{"_index":971,"title":{},"body":{"controllers/UserController.html":{}}}],["currentuser.id",{"_index":973,"title":{},"body":{"controllers/UserController.html":{}}}],["currentuser.isadmin",{"_index":972,"title":{},"body":{"controllers/UserController.html":{}}}],["công",{"_index":1143,"title":{},"body":{"license.html":{}}}],["damages",{"_index":1198,"title":{},"body":{"license.html":{}}}],["databasemodule",{"_index":39,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":273,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/CreateRecordDto.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["date().toisostring",{"_index":711,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["date(date.now",{"_index":488,"title":{},"body":{"injectables/BookService.html":{}}}],["deal",{"_index":1156,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1207,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"classes/BookPagination.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryPagination.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"classes/RecordPagination.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPagination.html":{}}}],["default",{"_index":313,"title":{},"body":{"classes/Book.html":{},"classes/BookPagination.html":{},"classes/Category.html":{},"classes/CategoryPagination.html":{},"classes/LengthLimits.html":{},"classes/Record.html":{},"classes/RecordPagination.html":{},"classes/User.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["default_limit",{"_index":409,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{}}}],["default_page",{"_index":410,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":352,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":388,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@httpcode(204",{"_index":839,"title":{},"body":{"controllers/RecordController.html":{}}}],["deleteresult",{"_index":967,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":28,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":260,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"index.html":{}}}],["development",{"_index":1101,"title":{},"body":{"index.html":{}}}],["disable",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["dist",{"_index":684,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["distribute",{"_index":1166,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":1035,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["dto/create",{"_index":367,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":369,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["due",{"_index":670,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["e2e",{"_index":1111,"title":{},"body":{"index.html":{}}}],["eager",{"_index":495,"title":{},"body":{"classes/Category.html":{}}}],["efficient",{"_index":1091,"title":{},"body":{"index.html":{}}}],["email",{"_index":764,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["empty",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["entity",{"_index":301,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["entity.js",{"_index":685,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["enumerations",{"_index":1079,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":708,"title":{},"body":{"classes/ExceptionsFilter.html":{},"injectables/UserService.html":{}}}],["error('password",{"_index":1021,"title":{},"body":{"injectables/UserService.html":{}}}],["eslint",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["eslint/no",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["event",{"_index":1193,"title":{},"body":{"license.html":{}}}],["exception",{"_index":694,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["exception.getresponse",{"_index":704,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":703,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":688,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["exceptionsfilter",{"_index":53,"title":{"classes/ExceptionsFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/ExceptionsFilter.html":{},"coverage.html":{}}}],["exclude",{"_index":309,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["excludenullinterceptor",{"_index":712,"title":{"injectables/ExcludeNullInterceptor.html":{}},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["executioncontext",{"_index":717,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"guards/RolesGuard.html":{}}}],["exist",{"_index":383,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["existed",{"_index":600,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/UserService.html":{}}}],["expiresin",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":1062,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":741,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":777,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":780,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":284,"title":{},"body":{"classes/Book.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"classes/Record.html":{},"injectables/RecordService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["files",{"_index":1155,"title":{},"body":{"license.html":{}}}],["filter/exception.filter",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["filter/exception.filter.ts",{"_index":686,"title":{},"body":{"classes/ExceptionsFilter.html":{},"coverage.html":{}}}],["filter/exception.filter.ts:11",{"_index":693,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["find",{"_index":464,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["findandcount",{"_index":460,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["findbooks",{"_index":323,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{}}}],["findbooks(@query",{"_index":376,"title":{},"body":{"controllers/BookController.html":{}}}],["findbooks(page",{"_index":438,"title":{},"body":{"injectables/BookService.html":{}}}],["findbooks(undefined",{"_index":334,"title":{},"body":{"controllers/BookController.html":{}}}],["findbooksofone",{"_index":519,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findbooksofone(@param('id",{"_index":553,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findbooksofone(id",{"_index":531,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findbusyone",{"_index":859,"title":{},"body":{"injectables/RecordService.html":{}}}],["findbusyone(userid",{"_index":865,"title":{},"body":{"injectables/RecordService.html":{}}}],["findcategories",{"_index":520,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["findcategories(@query",{"_index":549,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findcategories(page",{"_index":589,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findcategories(undefined",{"_index":534,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findone",{"_index":324,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":381,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{}}}],["findone(id",{"_index":338,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["findone(request",{"_index":954,"title":{},"body":{"controllers/UserController.html":{}}}],["findonename",{"_index":578,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findonename(name",{"_index":592,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findonepayload",{"_index":992,"title":{},"body":{"injectables/UserService.html":{}}}],["findonepayload(payload",{"_index":998,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneusername",{"_index":993,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneusername(username",{"_index":1000,"title":{},"body":{"injectables/UserService.html":{}}}],["findrecords",{"_index":835,"title":{},"body":{"controllers/RecordController.html":{},"injectables/RecordService.html":{}}}],["findrecords(@query",{"_index":844,"title":{},"body":{"controllers/RecordController.html":{}}}],["findrecords(page",{"_index":868,"title":{},"body":{"injectables/RecordService.html":{}}}],["findrecords(undefined",{"_index":837,"title":{},"body":{"controllers/RecordController.html":{}}}],["findusers",{"_index":953,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findusers(@query",{"_index":969,"title":{},"body":{"controllers/UserController.html":{}}}],["findusers(page",{"_index":1002,"title":{},"body":{"injectables/UserService.html":{}}}],["findusers(undefined",{"_index":956,"title":{},"body":{"controllers/UserController.html":{}}}],["first_name",{"_index":933,"title":{},"body":{"classes/User.html":{}}}],["firstname",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["fitness",{"_index":1189,"title":{},"body":{"license.html":{}}}],["following",{"_index":1175,"title":{},"body":{"license.html":{}}}],["framework",{"_index":1089,"title":{},"body":{"index.html":{}}}],["free",{"_index":1148,"title":{},"body":{"license.html":{}}}],["function",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["functions",{"_index":1083,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1173,"title":{},"body":{"license.html":{}}}],["get(':id",{"_index":380,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["get(':id')@httpcode(200",{"_index":339,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["get(':id/book",{"_index":552,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':id/book')@httpcode(200",{"_index":532,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get('google",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@httpcode(200",{"_index":336,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{}}}],["getcookiewithjwttoken",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwttoken(user",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["getone",{"_index":609,"title":{},"body":{"injectables/CategoryService.html":{}}}],["getprofile",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(@req",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(request",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":1085,"title":{"index.html":{},"license.html":{}},"body":{}}],["google",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["googleauthguard",{"_index":113,"title":{"injectables/GoogleAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["googlestrategy",{"_index":152,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["granted",{"_index":1147,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1211,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":1118,"title":{},"body":{"index.html":{}}}],["guard",{"_index":887,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guard/google.guard",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/jwt.guard",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/local.guard",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards",{"_index":888,"title":{},"body":{"guards/RolesGuard.html":{}}}],["handle",{"_index":728,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["hash",{"_index":672,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["hashpassword",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["hashpassword(plainpassword",{"_index":1004,"title":{},"body":{"injectables/UserService.html":{}}}],["hello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["here",{"_index":1129,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1146,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1195,"title":{},"body":{"license.html":{}}}],["host",{"_index":691,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":697,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["httpcode",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["httpcode(200",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["httpcode(201",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{}}}],["httpcode(204",{"_index":389,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["httpexception",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ExceptionsFilter.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpexception('books",{"_index":467,"title":{},"body":{"injectables/BookService.html":{}}}],["httpexception('categories",{"_index":616,"title":{},"body":{"injectables/CategoryService.html":{}}}],["httpexception('forbidden",{"_index":975,"title":{},"body":{"controllers/UserController.html":{}}}],["httpexception('invalid",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('not",{"_index":489,"title":{},"body":{"injectables/BookService.html":{}}}],["httpexception('records",{"_index":882,"title":{},"body":{"injectables/RecordService.html":{}}}],["httpexception('unable",{"_index":450,"title":{},"body":{"injectables/BookService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["httpexception('users",{"_index":1027,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('wrong",{"_index":478,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["httponly",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":1136,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ExceptionsFilter.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_request",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["httpstatus.conflict",{"_index":491,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["httpstatus.forbidden",{"_index":977,"title":{},"body":{"controllers/UserController.html":{}}}],["httpstatus.internal_server_error",{"_index":705,"title":{},"body":{"classes/ExceptionsFilter.html":{},"injectables/UserService.html":{}}}],["httpstatus.not_acceptable",{"_index":481,"title":{},"body":{"injectables/BookService.html":{}}}],["httpstatus.not_found",{"_index":384,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpstatus.unauthorized",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":261,"title":{},"body":{"classes/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":781,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":687,"title":{},"body":{"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"guards/RolesGuard.html":{}}}],["implied",{"_index":1185,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/DatabaseModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{}}}],["in.user.dto.ts",{"_index":914,"title":{},"body":{"classes/SignedInUserDto.html":{},"coverage.html":{}}}],["included",{"_index":1180,"title":{},"body":{"license.html":{}}}],["including",{"_index":1159,"title":{},"body":{"license.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{}}}],["information",{"_index":474,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":171,"title":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":446,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["injectrepository(book",{"_index":447,"title":{},"body":{"injectables/BookService.html":{}}}],["injectrepository(category",{"_index":596,"title":{},"body":{"injectables/CategoryService.html":{}}}],["injectrepository(record",{"_index":875,"title":{},"body":{"injectables/RecordService.html":{}}}],["injectrepository(user",{"_index":1012,"title":{},"body":{"injectables/UserService.html":{}}}],["installation",{"_index":1097,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1099,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":702,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["intercept",{"_index":714,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["intercept(context",{"_index":716,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["interface",{"_index":765,"title":{"interfaces/IRequest.html":{}},"body":{"interfaces/IRequest.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":766,"title":{},"body":{"interfaces/IRequest.html":{}}}],["internal",{"_index":706,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["inversejoincolumn",{"_index":499,"title":{},"body":{"classes/Category.html":{}}}],["irequest",{"_index":78,"title":{"interfaces/IRequest.html":{}},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"interfaces/IRequest.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["is_admin",{"_index":936,"title":{},"body":{"classes/User.html":{}}}],["is_archived",{"_index":314,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{}}}],["is_archived'})@exclude",{"_index":285,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{}}}],["is_busy",{"_index":287,"title":{},"body":{"classes/Book.html":{}}}],["isadmin",{"_index":660,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["isarchived",{"_index":262,"title":{},"body":{"classes/Book.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/Record.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["isboolean",{"_index":632,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{}}}],["isboolean()@isoptional",{"_index":625,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{}}}],["isbusy",{"_index":263,"title":{},"body":{"classes/Book.html":{},"classes/CreateBookDto.html":{}}}],["isdate",{"_index":655,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["isdate()@isoptional",{"_index":649,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["isempty",{"_index":873,"title":{},"body":{"injectables/RecordService.html":{}}}],["isinstance",{"_index":656,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["isinstance(book",{"_index":658,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["isinstance(book)@isnotempty",{"_index":647,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["isinstance(user",{"_index":657,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["isinstance(user)@isnotempty",{"_index":651,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["ismatchpassword",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["ismatchpassword(plainpassword",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":633,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"injectables/RecordService.html":{}}}],["isnumber",{"_index":419,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/CreateBookDto.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{}}}],["isnumber()@isnotempty()@min(1",{"_index":630,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["isoptional",{"_index":421,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{}}}],["isoptional()@type(undefined)@isnumber()@min(1",{"_index":416,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{}}}],["isstring",{"_index":634,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":667,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@length(lengthlimits.min_length",{"_index":628,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@length(lengthlimits.password_plain_min_length",{"_index":664,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@maxlength(lengthlimits.big_max_length",{"_index":623,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{}}}],["join",{"_index":1125,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":498,"title":{},"body":{"classes/Category.html":{},"classes/Record.html":{}}}],["jointable",{"_index":508,"title":{},"body":{"classes/Category.html":{}}}],["jwt",{"_index":778,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_expiration_time",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtauthguard",{"_index":115,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":779,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":153,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtuser",{"_index":769,"title":{},"body":{"interfaces/IRequest.html":{},"miscellaneous/typealiases.html":{}}}],["kamil",{"_index":1133,"title":{},"body":{"index.html":{}}}],["key",{"_index":738,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["key_map",{"_index":930,"title":{},"body":{"classes/User.html":{}}}],["kind",{"_index":1184,"title":{},"body":{"license.html":{}}}],["last_name",{"_index":939,"title":{},"body":{"classes/User.html":{}}}],["lastname",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["leftjoinandselect('category.books",{"_index":606,"title":{},"body":{"injectables/CategoryService.html":{}}}],["legend",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":278,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["length(lengthlimits.min_length",{"_index":637,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{}}}],["lengthlimits",{"_index":299,"title":{"classes/LengthLimits.html":{}},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/LengthLimits.html":{},"classes/User.html":{},"coverage.html":{}}}],["lengthlimits.big_max_length",{"_index":312,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{}}}],["lengthlimits.password_hash_length",{"_index":949,"title":{},"body":{"classes/User.html":{}}}],["lengthlimits.password_plain_max_length",{"_index":665,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lengthlimits.password_plain_min_length",{"_index":674,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lengthlimits.small_max_length",{"_index":311,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["liability",{"_index":1199,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1196,"title":{},"body":{"license.html":{}}}],["license",{"_index":1139,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":1115,"title":{},"body":{"index.html":{}}}],["limit",{"_index":378,"title":{},"body":{"controllers/BookController.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{}}}],["limitation",{"_index":1160,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1186,"title":{},"body":{"license.html":{}}}],["line",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["literal",{"_index":1221,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["local",{"_index":809,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":117,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":154,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@req",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(request",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["logingoogle",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logingoogle(@req",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["logingoogle(_request",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["logingoogle(req",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["logingoogleredirect",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["logingoogleredirect(@req",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["logingoogleredirect(request",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["manytomany",{"_index":304,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{}}}],["manytomany(undefined",{"_index":268,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{}}}],["manytoone",{"_index":830,"title":{},"body":{"classes/Record.html":{}}}],["manytoone(undefined",{"_index":813,"title":{},"body":{"classes/Record.html":{}}}],["map",{"_index":726,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["matching",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["maximum",{"_index":671,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength",{"_index":635,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{}}}],["maxlength(lengthlimits.big_max_length",{"_index":638,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{}}}],["merchantability",{"_index":1188,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1164,"title":{},"body":{"license.html":{}}}],["message",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":1072,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":420,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/CreateBookDto.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{}}}],["min(1",{"_index":424,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/CreateBookDto.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{}}}],["min_length",{"_index":787,"title":{},"body":{"classes/LengthLimits.html":{}}}],["miscellaneous",{"_index":1078,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1114,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":1104,"title":{},"body":{"index.html":{}}}],["modify",{"_index":1163,"title":{},"body":{"license.html":{}}}],["module",{"_index":25,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/DatabaseModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/DatabaseModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":27,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/DatabaseModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1128,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":1066,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1134,"title":{},"body":{"index.html":{}}}],["name",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["name.familyname",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["nest",{"_index":1095,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1138,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":724,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/decorators",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["nestjs/config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":895,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/core/constants",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["nestjs/jwt",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":916,"title":{},"body":{"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":404,"title":{},"body":{"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/DatabaseModule.html":{},"modules/RecordModule.html":{},"injectables/RecordService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ExceptionsFilter.html":{},"injectables/GoogleStrategy.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["next",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExcludeNullInterceptor.html":{}}}],["node.js",{"_index":1088,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1192,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1178,"title":{},"body":{"license.html":{}}}],["now",{"_index":480,"title":{},"body":{"injectables/BookService.html":{}}}],["null",{"_index":733,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["nullable",{"_index":270,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["number",{"_index":280,"title":{},"body":{"classes/Book.html":{},"controllers/BookController.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/ExceptionsFilter.html":{},"interfaces/IRequest.html":{},"classes/LengthLimits.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{}}}],["oauth20",{"_index":752,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":735,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["object.assign",{"_index":681,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["object.assign(book",{"_index":448,"title":{},"body":{"injectables/BookService.html":{}}}],["object.assign(category",{"_index":597,"title":{},"body":{"injectables/CategoryService.html":{}}}],["object.assign(record",{"_index":876,"title":{},"body":{"injectables/RecordService.html":{}}}],["object.entries(value).map(([key",{"_index":737,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["object.fromentries",{"_index":736,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["observable",{"_index":721,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["obtaining",{"_index":1151,"title":{},"body":{"license.html":{}}}],["omittype",{"_index":920,"title":{},"body":{"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{}}}],["omittype(createbookdto",{"_index":922,"title":{},"body":{"classes/UpdateBookDto.html":{}}}],["omittype(createcategorydto",{"_index":924,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["omittype(createrecorddto",{"_index":926,"title":{},"body":{"classes/UpdateRecordDto.html":{}}}],["onetomany",{"_index":305,"title":{},"body":{"classes/Book.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":294,"title":{},"body":{"classes/Book.html":{},"classes/User.html":{}}}],["open",{"_index":1116,"title":{},"body":{"index.html":{}}}],["optional",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecordController.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{}}}],["order",{"_index":461,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["ormconfig",{"_index":677,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["otherwise",{"_index":1204,"title":{},"body":{"license.html":{}}}],["out",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1213,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1055,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":377,"title":{},"body":{"controllers/BookController.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{}}}],["param",{"_index":351,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":386,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":921,"title":{},"body":{"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{}}}],["particular",{"_index":1190,"title":{},"body":{"license.html":{}}}],["passport",{"_index":751,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":753,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":755,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["password_hash",{"_index":941,"title":{},"body":{"classes/User.html":{}}}],["password_hash_length",{"_index":788,"title":{},"body":{"classes/LengthLimits.html":{}}}],["password_plain_max_length",{"_index":789,"title":{},"body":{"classes/LengthLimits.html":{}}}],["password_plain_min_length",{"_index":790,"title":{},"body":{"classes/LengthLimits.html":{}}}],["passwordhash",{"_index":931,"title":{},"body":{"classes/User.html":{}}}],["patch",{"_index":355,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":561,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["patch(':id')@httpcode(200",{"_index":963,"title":{},"body":{"controllers/UserController.html":{}}}],["patch(':id/book",{"_index":558,"title":{},"body":{"controllers/CategoryController.html":{}}}],["patch(':id/borrow",{"_index":392,"title":{},"body":{"controllers/BookController.html":{}}}],["patch(':id/return",{"_index":394,"title":{},"body":{"controllers/BookController.html":{}}}],["path",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{}}}],["path.join(process.cwd",{"_index":683,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["payload",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IRequest.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["payload.sub",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["payload.username",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["permission",{"_index":1145,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1171,"title":{},"body":{"license.html":{}}}],["person",{"_index":1150,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1172,"title":{},"body":{"license.html":{}}}],["picktype",{"_index":915,"title":{},"body":{"classes/SignedInUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["picktype(createuserdto",{"_index":918,"title":{},"body":{"classes/SignedInUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["pipe(map((value",{"_index":729,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["plainpassword",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["please",{"_index":1126,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1182,"title":{},"body":{"license.html":{}}}],["post",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{}}}],["post(':id/book",{"_index":556,"title":{},"body":{"controllers/CategoryController.html":{}}}],["post('signin",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup')@httpcode(201",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":264,"title":{},"body":{"classes/Book.html":{},"classes/CreateBookDto.html":{}}}],["primarygeneratedcolumn",{"_index":281,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["private",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["process.env.jwt_expiration",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.jwt_secret",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["production",{"_index":1106,"title":{},"body":{"index.html":{}}}],["profile",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["progressive",{"_index":1087,"title":{},"body":{"index.html":{}}}],["project",{"_index":1117,"title":{},"body":{"index.html":{}}}],["promise",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["promise.all",{"_index":475,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["properties",{"_index":257,"title":{},"body":{"classes/Book.html":{},"classes/BookPagination.html":{},"classes/Category.html":{},"classes/CategoryPagination.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/IRequest.html":{},"classes/LengthLimits.html":{},"classes/Record.html":{},"classes/RecordPagination.html":{},"classes/User.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{}}}],["provide",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["provided",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["providers",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":802,"title":{},"body":{"classes/LengthLimits.html":{}}}],["publish",{"_index":1165,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1191,"title":{},"body":{"license.html":{}}}],["put",{"_index":354,"title":{},"body":{"controllers/BookController.html":{}}}],["put(':id",{"_index":385,"title":{},"body":{"controllers/BookController.html":{}}}],["query",{"_index":353,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["read",{"_index":1127,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalStrategy.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["record",{"_index":293,"title":{"classes/Record.html":{}},"body":{"classes/Book.html":{},"injectables/BookService.html":{},"modules/CategoryModule.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"injectables/RecordService.html":{},"classes/User.html":{},"coverage.html":{}}}],["record's",{"_index":886,"title":{},"body":{"injectables/RecordService.html":{}}}],["record.book",{"_index":318,"title":{},"body":{"classes/Book.html":{}}}],["record.borrower",{"_index":950,"title":{},"body":{"classes/User.html":{}}}],["record.controller",{"_index":852,"title":{},"body":{"modules/RecordModule.html":{}}}],["record.dto",{"_index":874,"title":{},"body":{"injectables/RecordService.html":{},"classes/UpdateRecordDto.html":{}}}],["record.dto.ts",{"_index":646,"title":{},"body":{"classes/CreateRecordDto.html":{},"classes/UpdateRecordDto.html":{},"coverage.html":{}}}],["record.dto.ts:14",{"_index":652,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["record.dto.ts:18",{"_index":648,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["record.dto.ts:22",{"_index":650,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["record.dto.ts:26",{"_index":654,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["record.dto.ts:30",{"_index":653,"title":{},"body":{"classes/CreateRecordDto.html":{}}}],["record.entity",{"_index":842,"title":{},"body":{"controllers/RecordController.html":{},"modules/RecordModule.html":{},"injectables/RecordService.html":{}}}],["record.service",{"_index":841,"title":{},"body":{"controllers/RecordController.html":{},"modules/RecordModule.html":{}}}],["record/record.entity",{"_index":308,"title":{},"body":{"classes/Book.html":{},"classes/User.html":{}}}],["recordcontroller",{"_index":833,"title":{"controllers/RecordController.html":{}},"body":{"controllers/RecordController.html":{},"modules/RecordModule.html":{},"coverage.html":{}}}],["recordmodule",{"_index":40,"title":{"modules/RecordModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookModule.html":{},"modules/RecordModule.html":{},"modules.html":{},"overview.html":{}}}],["recordpagination",{"_index":426,"title":{"classes/RecordPagination.html":{}},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"controllers/RecordController.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"classes/UserPagination.html":{},"coverage.html":{}}}],["recordpagination.default_limit",{"_index":879,"title":{},"body":{"injectables/RecordService.html":{}}}],["recordpagination.default_page",{"_index":878,"title":{},"body":{"injectables/RecordService.html":{}}}],["recordrepo",{"_index":862,"title":{},"body":{"injectables/RecordService.html":{}}}],["records",{"_index":265,"title":{},"body":{"classes/Book.html":{},"injectables/RecordService.html":{},"classes/User.html":{}}}],["records.length",{"_index":881,"title":{},"body":{"injectables/RecordService.html":{}}}],["recordservice",{"_index":400,"title":{"injectables/RecordService.html":{}},"body":{"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/CategoryModule.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"injectables/RecordService.html":{},"coverage.html":{},"overview.html":{}}}],["recursivelystripnullvalues",{"_index":715,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["recursivelystripnullvalues(value",{"_index":722,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["referencedcolumnname",{"_index":513,"title":{},"body":{"classes/Category.html":{}}}],["reflect",{"_index":1071,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":891,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refreshtoken",{"_index":747,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["register",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["register(createuserdto",{"_index":1006,"title":{},"body":{"injectables/UserService.html":{}}}],["register(request",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["relations",{"_index":617,"title":{},"body":{"injectables/CategoryService.html":{}}}],["remove",{"_index":325,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":390,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{}}}],["remove(id",{"_index":341,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["remove(request",{"_index":959,"title":{},"body":{"controllers/UserController.html":{}}}],["repository",{"_index":429,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["request",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"interfaces/IRequest.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["request.headers.authorization.substring('bearer",{"_index":905,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request.user",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["required",{"_index":669,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["requiredroles",{"_index":900,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":910,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resource",{"_index":976,"title":{},"body":{"controllers/UserController.html":{}}}],["response",{"_index":698,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["response.status(statuscode).json",{"_index":709,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["restriction",{"_index":1158,"title":{},"body":{"license.html":{}}}],["result",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"modules/DatabaseModule.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["return(request",{"_index":344,"title":{},"body":{"controllers/BookController.html":{}}}],["return(userid",{"_index":443,"title":{},"body":{"injectables/BookService.html":{}}}],["returned_at",{"_index":826,"title":{},"body":{"classes/Record.html":{}}}],["returnedat",{"_index":493,"title":{},"body":{"injectables/BookService.html":{},"classes/CreateRecordDto.html":{},"classes/Record.html":{},"injectables/RecordService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rights",{"_index":1161,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1074,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":360,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.admin",{"_index":909,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.decorator",{"_index":898,"title":{},"body":{"guards/RolesGuard.html":{}}}],["role.enum",{"_index":899,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":358,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":372,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["roles(role.admin)@delete(':id')@httpcode(204",{"_index":960,"title":{},"body":{"controllers/UserController.html":{}}}],["roles(role.admin)@get()@httpcode(200",{"_index":957,"title":{},"body":{"controllers/UserController.html":{}}}],["roles.includes(role",{"_index":911,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles.push(role.user",{"_index":908,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles_key",{"_index":897,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":62,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rxjs",{"_index":725,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":727,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["salt_rounds",{"_index":991,"title":{},"body":{"injectables/UserService.html":{}}}],["scalable",{"_index":1092,"title":{},"body":{"index.html":{}}}],["scope",{"_index":763,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["secret",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":782,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sell",{"_index":1169,"title":{},"body":{"license.html":{}}}],["server",{"_index":707,"title":{},"body":{"classes/ExceptionsFilter.html":{},"index.html":{}}}],["setmetadata(roles_key",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1179,"title":{},"body":{"license.html":{}}}],["side",{"_index":1093,"title":{},"body":{"index.html":{}}}],["signedinuserdto",{"_index":912,"title":{"classes/SignedInUserDto.html":{}},"body":{"classes/SignedInUserDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["skip",{"_index":456,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["small_max_length",{"_index":791,"title":{},"body":{"classes/LengthLimits.html":{}}}],["software",{"_index":1153,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"modules/RecordModule.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":1120,"title":{},"body":{"index.html":{}}}],["src/.../auth.type.ts",{"_index":1220,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1084,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.decorator.ts",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":1080,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:6",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/app.module.ts",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module.ts",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":896,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/auth.service.ts",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:53",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:61",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:68",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:76",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:86",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.type",{"_index":356,"title":{},"body":{"controllers/BookController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/auth/auth.type.ts",{"_index":767,"title":{},"body":{"interfaces/IRequest.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/guard/google.guard.ts",{"_index":739,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/jwt.guard",{"_index":357,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["src/auth/guard/jwt.guard.ts",{"_index":770,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/local.guard.ts",{"_index":803,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/strategy/google.strategy.ts",{"_index":743,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/google.strategy.ts:17",{"_index":748,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategy/google.strategy.ts:7",{"_index":745,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts:21",{"_index":776,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:9",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts",{"_index":805,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/local.strategy.ts:13",{"_index":808,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts:8",{"_index":806,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/book/book.controller.ts",{"_index":320,"title":{},"body":{"controllers/BookController.html":{},"coverage.html":{}}}],["src/book/book.controller.ts:36",{"_index":333,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:44",{"_index":337,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:50",{"_index":340,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:64",{"_index":350,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:75",{"_index":343,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:82",{"_index":329,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.controller.ts:98",{"_index":346,"title":{},"body":{"controllers/BookController.html":{}}}],["src/book/book.entity",{"_index":541,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateRecordDto.html":{}}}],["src/book/book.entity.ts",{"_index":256,"title":{},"body":{"classes/Book.html":{},"coverage.html":{}}}],["src/book/book.entity.ts:18",{"_index":282,"title":{},"body":{"classes/Book.html":{}}}],["src/book/book.entity.ts:21",{"_index":290,"title":{},"body":{"classes/Book.html":{}}}],["src/book/book.entity.ts:24",{"_index":279,"title":{},"body":{"classes/Book.html":{}}}],["src/book/book.entity.ts:27",{"_index":292,"title":{},"body":{"classes/Book.html":{}}}],["src/book/book.entity.ts:30",{"_index":288,"title":{},"body":{"classes/Book.html":{}}}],["src/book/book.entity.ts:34",{"_index":286,"title":{},"body":{"classes/Book.html":{}}}],["src/book/book.entity.ts:38",{"_index":276,"title":{},"body":{"classes/Book.html":{}}}],["src/book/book.entity.ts:42",{"_index":298,"title":{},"body":{"classes/Book.html":{}}}],["src/book/book.entity.ts:47",{"_index":272,"title":{},"body":{"classes/Book.html":{}}}],["src/book/book.entity.ts:50",{"_index":295,"title":{},"body":{"classes/Book.html":{}}}],["src/book/book.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{}}}],["src/book/book.module.ts",{"_index":401,"title":{},"body":{"modules/BookModule.html":{}}}],["src/book/book.service",{"_index":570,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["src/book/book.service.ts",{"_index":427,"title":{},"body":{"injectables/BookService.html":{},"coverage.html":{}}}],["src/book/book.service.ts:118",{"_index":444,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:12",{"_index":430,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:21",{"_index":437,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:30",{"_index":439,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:61",{"_index":441,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:72",{"_index":445,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:84",{"_index":442,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/book.service.ts:90",{"_index":434,"title":{},"body":{"injectables/BookService.html":{}}}],["src/book/dto/create",{"_index":542,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"coverage.html":{}}}],["src/book/dto/update",{"_index":919,"title":{},"body":{"classes/UpdateBookDto.html":{},"coverage.html":{}}}],["src/category/category.controller.ts",{"_index":516,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/category/category.controller.ts:108",{"_index":537,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:35",{"_index":530,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:43",{"_index":535,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:49",{"_index":536,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:61",{"_index":533,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:75",{"_index":524,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:86",{"_index":527,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:97",{"_index":540,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.entity.ts",{"_index":494,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/category/category.entity.ts:18",{"_index":503,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:21",{"_index":506,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:24",{"_index":502,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:28",{"_index":504,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:32",{"_index":501,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:36",{"_index":507,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:53",{"_index":500,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["src/category/category.module.ts",{"_index":568,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/category/category.service.ts",{"_index":577,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/category/category.service.ts:120",{"_index":591,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:13",{"_index":580,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:137",{"_index":593,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:148",{"_index":588,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:152",{"_index":595,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:164",{"_index":594,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:21",{"_index":587,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:39",{"_index":586,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:75",{"_index":583,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:86",{"_index":590,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/dto/create",{"_index":639,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/category/dto/update",{"_index":923,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/constants/length",{"_index":636,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{}}}],["src/constants/length.ts",{"_index":785,"title":{},"body":{"classes/LengthLimits.html":{},"coverage.html":{}}}],["src/constants/length.ts:2",{"_index":794,"title":{},"body":{"classes/LengthLimits.html":{}}}],["src/constants/length.ts:3",{"_index":801,"title":{},"body":{"classes/LengthLimits.html":{}}}],["src/constants/length.ts:4",{"_index":793,"title":{},"body":{"classes/LengthLimits.html":{}}}],["src/constants/length.ts:5",{"_index":795,"title":{},"body":{"classes/LengthLimits.html":{}}}],["src/constants/length.ts:6",{"_index":799,"title":{},"body":{"classes/LengthLimits.html":{}}}],["src/constants/length.ts:7",{"_index":797,"title":{},"body":{"classes/LengthLimits.html":{}}}],["src/database/database.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["src/database/database.module.ts",{"_index":675,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/main.ts",{"_index":1048,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/record/dto/create",{"_index":645,"title":{},"body":{"classes/CreateRecordDto.html":{},"coverage.html":{}}}],["src/record/dto/update",{"_index":925,"title":{},"body":{"classes/UpdateRecordDto.html":{},"coverage.html":{}}}],["src/record/record.controller.ts",{"_index":834,"title":{},"body":{"controllers/RecordController.html":{},"coverage.html":{}}}],["src/record/record.controller.ts:28",{"_index":838,"title":{},"body":{"controllers/RecordController.html":{}}}],["src/record/record.controller.ts:34",{"_index":836,"title":{},"body":{"controllers/RecordController.html":{}}}],["src/record/record.controller.ts:46",{"_index":840,"title":{},"body":{"controllers/RecordController.html":{}}}],["src/record/record.entity",{"_index":571,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/record/record.entity.ts",{"_index":811,"title":{},"body":{"classes/Record.html":{},"coverage.html":{}}}],["src/record/record.entity.ts:17",{"_index":824,"title":{},"body":{"classes/Record.html":{}}}],["src/record/record.entity.ts:20",{"_index":822,"title":{},"body":{"classes/Record.html":{}}}],["src/record/record.entity.ts:23",{"_index":816,"title":{},"body":{"classes/Record.html":{}}}],["src/record/record.entity.ts:27",{"_index":825,"title":{},"body":{"classes/Record.html":{}}}],["src/record/record.entity.ts:30",{"_index":819,"title":{},"body":{"classes/Record.html":{}}}],["src/record/record.entity.ts:33",{"_index":827,"title":{},"body":{"classes/Record.html":{}}}],["src/record/record.entity.ts:37",{"_index":823,"title":{},"body":{"classes/Record.html":{}}}],["src/record/record.entity.ts:41",{"_index":828,"title":{},"body":{"classes/Record.html":{}}}],["src/record/record.entity.ts:45",{"_index":821,"title":{},"body":{"classes/Record.html":{}}}],["src/record/record.entity.ts:49",{"_index":815,"title":{},"body":{"classes/Record.html":{}}}],["src/record/record.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/BookModule.html":{}}}],["src/record/record.module.ts",{"_index":851,"title":{},"body":{"modules/RecordModule.html":{}}}],["src/record/record.service",{"_index":405,"title":{},"body":{"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/CategoryModule.html":{}}}],["src/record/record.service.ts",{"_index":858,"title":{},"body":{"injectables/RecordService.html":{},"coverage.html":{}}}],["src/record/record.service.ts:100",{"_index":870,"title":{},"body":{"injectables/RecordService.html":{}}}],["src/record/record.service.ts:11",{"_index":861,"title":{},"body":{"injectables/RecordService.html":{}}}],["src/record/record.service.ts:17",{"_index":864,"title":{},"body":{"injectables/RecordService.html":{}}}],["src/record/record.service.ts:29",{"_index":869,"title":{},"body":{"injectables/RecordService.html":{}}}],["src/record/record.service.ts:63",{"_index":867,"title":{},"body":{"injectables/RecordService.html":{}}}],["src/record/record.service.ts:69",{"_index":866,"title":{},"body":{"injectables/RecordService.html":{}}}],["src/record/record.service.ts:88",{"_index":872,"title":{},"body":{"injectables/RecordService.html":{}}}],["src/role/role.decorator",{"_index":359,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["src/role/role.decorator.ts",{"_index":1049,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/role/role.enum",{"_index":361,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["src/role/role.enum.ts",{"_index":1081,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/role/role.guard",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["src/role/role.guard.ts",{"_index":889,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/role/role.guard.ts:14",{"_index":894,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/role/role.guard.ts:8",{"_index":892,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/user/dto/create",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/signed",{"_index":913,"title":{},"body":{"classes/SignedInUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":928,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":952,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:33",{"_index":958,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:39",{"_index":955,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:58",{"_index":964,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:73",{"_index":961,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"classes/CreateRecordDto.html":{},"interfaces/IRequest.html":{},"injectables/LocalStrategy.html":{}}}],["src/user/user.entity.ts",{"_index":929,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:16",{"_index":938,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:25",{"_index":935,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:28",{"_index":948,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:32",{"_index":943,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:35",{"_index":934,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:38",{"_index":940,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:41",{"_index":937,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:44",{"_index":932,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:48",{"_index":947,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:52",{"_index":945,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:54",{"_index":946,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{}}}],["src/user/user.module.ts",{"_index":983,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/CategoryModule.html":{}}}],["src/user/user.service.ts",{"_index":990,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:100",{"_index":1009,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:112",{"_index":1008,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:12",{"_index":995,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:17",{"_index":1011,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:19",{"_index":1007,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":1005,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:46",{"_index":1003,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:77",{"_index":997,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:83",{"_index":1001,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:89",{"_index":999,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/exception",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/ExceptionsFilter.html":{},"coverage.html":{}}}],["src/utils/interceptor/excludenull.interceptor.ts",{"_index":713,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{},"coverage.html":{}}}],["src/utils/interceptor/excludenull.interceptor.ts:12",{"_index":719,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["src/utils/interceptor/excludenull.interceptor.ts:18",{"_index":723,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["src/utils/pagination/pagination",{"_index":362,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["src/utils/pagination/pagination.ts",{"_index":407,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/RecordPagination.html":{},"classes/UserPagination.html":{},"coverage.html":{}}}],["src/utils/pagination/pagination.ts:12",{"_index":989,"title":{},"body":{"classes/UserPagination.html":{}}}],["src/utils/pagination/pagination.ts:18",{"_index":988,"title":{},"body":{"classes/UserPagination.html":{}}}],["src/utils/pagination/pagination.ts:22",{"_index":415,"title":{},"body":{"classes/BookPagination.html":{}}}],["src/utils/pagination/pagination.ts:23",{"_index":413,"title":{},"body":{"classes/BookPagination.html":{}}}],["src/utils/pagination/pagination.ts:29",{"_index":418,"title":{},"body":{"classes/BookPagination.html":{}}}],["src/utils/pagination/pagination.ts:35",{"_index":417,"title":{},"body":{"classes/BookPagination.html":{}}}],["src/utils/pagination/pagination.ts:39",{"_index":574,"title":{},"body":{"classes/CategoryPagination.html":{}}}],["src/utils/pagination/pagination.ts:40",{"_index":573,"title":{},"body":{"classes/CategoryPagination.html":{}}}],["src/utils/pagination/pagination.ts:46",{"_index":576,"title":{},"body":{"classes/CategoryPagination.html":{}}}],["src/utils/pagination/pagination.ts:5",{"_index":987,"title":{},"body":{"classes/UserPagination.html":{}}}],["src/utils/pagination/pagination.ts:52",{"_index":575,"title":{},"body":{"classes/CategoryPagination.html":{}}}],["src/utils/pagination/pagination.ts:56",{"_index":855,"title":{},"body":{"classes/RecordPagination.html":{}}}],["src/utils/pagination/pagination.ts:57",{"_index":854,"title":{},"body":{"classes/RecordPagination.html":{}}}],["src/utils/pagination/pagination.ts:6",{"_index":986,"title":{},"body":{"classes/UserPagination.html":{}}}],["src/utils/pagination/pagination.ts:63",{"_index":857,"title":{},"body":{"classes/RecordPagination.html":{}}}],["src/utils/pagination/pagination.ts:69",{"_index":856,"title":{},"body":{"classes/RecordPagination.html":{}}}],["start",{"_index":1102,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1105,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1107,"title":{},"body":{"index.html":{}}}],["started",{"_index":1086,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1096,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":408,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/LengthLimits.html":{},"classes/RecordPagination.html":{},"classes/User.html":{},"classes/UserPagination.html":{}}}],["statuscode",{"_index":700,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["statusmessage",{"_index":701,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["stay",{"_index":1130,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":750,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/google.strategy",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/jwt.strategy",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsFilter.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IRequest.html":{}}}],["subject",{"_index":1174,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1167,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1181,"title":{},"body":{"license.html":{}}}],["super",{"_index":756,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1121,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1209,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":454,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["test",{"_index":1110,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1113,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1112,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1109,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1119,"title":{},"body":{"index.html":{}}}],["this.authservice.login(request.user",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logingoogle(request",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuserjwt(payload",{"_index":784,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validateuserlocal(username",{"_index":810,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.verifytokenjwt(token",{"_index":906,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.bookrepo",{"_index":459,"title":{},"body":{"injectables/BookService.html":{}}}],["this.bookrepo.save(book",{"_index":484,"title":{},"body":{"injectables/BookService.html":{}}}],["this.bookrepo.save(book).catch",{"_index":449,"title":{},"body":{"injectables/BookService.html":{}}}],["this.bookrepo.update(id",{"_index":470,"title":{},"body":{"injectables/BookService.html":{}}}],["this.bookservice.borrow(request.user.id",{"_index":393,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.create(bookdto",{"_index":612,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.bookservice.create(createbookdto",{"_index":375,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.findbooks(page",{"_index":379,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.findone(+id",{"_index":382,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.findone(bookid",{"_index":603,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.bookservice.remove(+id",{"_index":391,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.return(request.user.id",{"_index":395,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.update(+id",{"_index":387,"title":{},"body":{"controllers/BookController.html":{}}}],["this.categoryrepo",{"_index":604,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepo.save(category",{"_index":611,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepo.save(category).catch",{"_index":601,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepo.update(id",{"_index":619,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.addnewbooktocategory(id",{"_index":557,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.addoldbooktocategory(id",{"_index":560,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":548,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findbooksofone(+id",{"_index":554,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findcategories(page",{"_index":550,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(+id",{"_index":551,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(+id",{"_index":563,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(+id",{"_index":562,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.findone(bookid",{"_index":477,"title":{},"body":{"injectables/BookService.html":{}}}],["this.findone(categoryid",{"_index":602,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.findone(id)).books",{"_index":618,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.findonename(category.name",{"_index":598,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.findoneusername(user.username",{"_index":1017,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hashpassword(createuserdto.password",{"_index":1013,"title":{},"body":{"injectables/UserService.html":{}}}],["this.ismatchpassword(password",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.recordrepo",{"_index":880,"title":{},"body":{"injectables/RecordService.html":{}}}],["this.recordrepo.findone",{"_index":883,"title":{},"body":{"injectables/RecordService.html":{}}}],["this.recordrepo.save(record).catch",{"_index":877,"title":{},"body":{"injectables/RecordService.html":{}}}],["this.recordrepo.update(id",{"_index":884,"title":{},"body":{"injectables/RecordService.html":{}}}],["this.recordservice.create",{"_index":485,"title":{},"body":{"injectables/BookService.html":{}}}],["this.recordservice.findbusyone(userid",{"_index":490,"title":{},"body":{"injectables/BookService.html":{}}}],["this.recordservice.findone(+id",{"_index":846,"title":{},"body":{"controllers/RecordController.html":{}}}],["this.recordservice.findrecords(page",{"_index":845,"title":{},"body":{"controllers/RecordController.html":{}}}],["this.recordservice.remove(+id",{"_index":847,"title":{},"body":{"controllers/RecordController.html":{}}}],["this.recordservice.update(record.id",{"_index":492,"title":{},"body":{"injectables/BookService.html":{}}}],["this.recursivelystripnullvalues(value",{"_index":730,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":901,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.salt_rounds).catch((error",{"_index":1020,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo",{"_index":1025,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.delete(id).catch",{"_index":1033,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.findone",{"_index":1029,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.findone(id).catch",{"_index":1028,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.save(user).catch((error",{"_index":1018,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.update(id",{"_index":1030,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findone(+id",{"_index":974,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(userid",{"_index":476,"title":{},"body":{"injectables/BookService.html":{}}}],["this.userservice.findonepayload(payload",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findoneusername(username",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findusers(page",{"_index":970,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.register",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.register(createuserdto",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.remove(+id",{"_index":979,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":978,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validateuserjwt",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/GoogleStrategy.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":710,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["token",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["tort",{"_index":1203,"title":{},"body":{"license.html":{}}}],["total",{"_index":458,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["touch",{"_index":1131,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":310,"title":{},"body":{"classes/Book.html":{},"classes/BookPagination.html":{},"classes/Category.html":{},"classes/CategoryPagination.html":{},"classes/Record.html":{},"classes/RecordPagination.html":{},"classes/User.html":{},"classes/UserPagination.html":{},"dependencies.html":{}}}],["true",{"_index":271,"title":{},"body":{"classes/Book.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Record.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["true})@exclude",{"_index":944,"title":{},"body":{"classes/User.html":{}}}],["true})@joincolumn({name",{"_index":814,"title":{},"body":{"classes/Record.html":{}}}],["true})@jointable({name",{"_index":496,"title":{},"body":{"classes/Category.html":{}}}],["twitter",{"_index":1137,"title":{},"body":{"index.html":{}}}],["type",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"classes/BookPagination.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CategoryPagination.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/JwtStrategy.html":{},"classes/LengthLimits.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1218,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":734,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["typeorm",{"_index":306,"title":{},"body":{"classes/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Record.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":403,"title":{},"body":{"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/DatabaseModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([book",{"_index":406,"title":{},"body":{"modules/BookModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":572,"title":{},"body":{"modules/CategoryModule.html":{}}}],["typeormmodule.forfeature([record",{"_index":853,"title":{},"body":{"modules/RecordModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":985,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":678,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":676,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":917,"title":{},"body":{"classes/SignedInUserDto.html":{},"classes/UpdateBookDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateRecordDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["unable",{"_index":472,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["unavailable",{"_index":468,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["undefined",{"_index":269,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["undefined})@exclude",{"_index":942,"title":{},"body":{"classes/User.html":{}}}],["unique",{"_index":510,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["unit",{"_index":1108,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":690,"title":{},"body":{"classes/ExceptionsFilter.html":{},"injectables/ExcludeNullInterceptor.html":{}}}],["update",{"_index":326,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(id",{"_index":347,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["update(request",{"_index":962,"title":{},"body":{"controllers/UserController.html":{}}}],["updatebookdto",{"_index":348,"title":{"classes/UpdateBookDto.html":{}},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/UpdateBookDto.html":{},"coverage.html":{}}}],["updatebookdto).catch",{"_index":471,"title":{},"body":{"injectables/BookService.html":{}}}],["updatecategorydto",{"_index":538,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto).catch",{"_index":620,"title":{},"body":{"injectables/CategoryService.html":{}}}],["updated_at",{"_index":316,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["updated_at'})@exclude",{"_index":297,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["updatedat",{"_index":266,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["updatedatecolumn",{"_index":303,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["updatedatecolumn({name",{"_index":296,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Record.html":{},"classes/User.html":{}}}],["updaterecorddto",{"_index":871,"title":{"classes/UpdateRecordDto.html":{}},"body":{"injectables/RecordService.html":{},"classes/UpdateRecordDto.html":{},"coverage.html":{}}}],["updaterecorddto).catch",{"_index":885,"title":{},"body":{"injectables/RecordService.html":{}}}],["updateresult",{"_index":363,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/RecordController.html":{},"injectables/RecordService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":927,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto).catch",{"_index":1031,"title":{},"body":{"injectables/UserService.html":{}}}],["use",{"_index":1162,"title":{},"body":{"license.html":{}}}],["useclass",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":679,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["useguards(googleauthguard",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(googleauthguard)@get('google",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(googleauthguard)@get('google/redirect",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/CategoryController.html":{},"controllers/RecordController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@get()@httpcode(200",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@patch(':id/borrow')@httpcode(200",{"_index":328,"title":{},"body":{"controllers/BookController.html":{}}}],["useguards(jwtauthguard)@patch(':id/return')@httpcode(200",{"_index":345,"title":{},"body":{"controllers/BookController.html":{}}}],["useguards(jwtauthguard)@roles(role.admin)@delete(':id')@httpcode(204",{"_index":342,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{}}}],["useguards(jwtauthguard)@roles(role.admin)@patch(':id')@httpcode(200",{"_index":539,"title":{},"body":{"controllers/CategoryController.html":{}}}],["useguards(jwtauthguard)@roles(role.admin)@patch(':id/book')@httpcode(200",{"_index":526,"title":{},"body":{"controllers/CategoryController.html":{}}}],["useguards(jwtauthguard)@roles(role.admin)@post(':id/book')@httpcode(201",{"_index":523,"title":{},"body":{"controllers/CategoryController.html":{}}}],["useguards(jwtauthguard)@roles(role.admin)@post()@httpcode(201",{"_index":332,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{}}}],["useguards(jwtauthguard)@roles(role.admin)@put(':id')@httpcode(200",{"_index":349,"title":{},"body":{"controllers/BookController.html":{}}}],["useguards(localauthguard",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('signin')@httpcode(200",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":184,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"modules/CategoryModule.html":{},"classes/CreateRecordDto.html":{},"interfaces/IRequest.html":{},"injectables/LocalStrategy.html":{},"classes/Record.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user's",{"_index":1032,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":984,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"classes/SignedInUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":659,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:13",{"_index":668,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":666,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":661,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":663,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":662,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":966,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.isadmin",{"_index":907,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.key_map.foreach((key",{"_index":1014,"title":{},"body":{"injectables/UserService.html":{}}}],["user.passwordhash",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.records",{"_index":831,"title":{},"body":{"classes/Record.html":{}}}],["user.service",{"_index":965,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.username",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.entity",{"_index":829,"title":{},"body":{"classes/Record.html":{}}}],["user[key",{"_index":1015,"title":{},"body":{"injectables/UserService.html":{}}}],["usercontroller",{"_index":951,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":435,"title":{},"body":{"injectables/BookService.html":{},"interfaces/IRequest.html":{},"injectables/RecordService.html":{}}}],["usermodule",{"_index":41,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IRequest.html":{},"injectables/LocalStrategy.html":{},"classes/SignedInUserDto.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["userpagination",{"_index":423,"title":{"classes/UserPagination.html":{}},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/RecordPagination.html":{},"controllers/UserController.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userpagination.default_limit",{"_index":1023,"title":{},"body":{"injectables/UserService.html":{}}}],["userpagination.default_page",{"_index":1022,"title":{},"body":{"injectables/UserService.html":{}}}],["userrepo",{"_index":996,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":1024,"title":{},"body":{"injectables/UserService.html":{}}}],["users.length",{"_index":1026,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":108,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"modules/CategoryModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["v",{"_index":1144,"title":{},"body":{"license.html":{}}}],["validate",{"_index":744,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(accesstoken",{"_index":746,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":807,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateusergoogle",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateusergoogle(profile",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuserjwt",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuserjwt(payload",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuserlocal",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuserlocal(username",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":422,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateRecordDto.html":{},"classes/CreateUserDto.html":{},"classes/RecordPagination.html":{},"injectables/RecordService.html":{},"classes/UserPagination.html":{},"dependencies.html":{}}}],["value",{"_index":411,"title":{},"body":{"classes/BookPagination.html":{},"classes/CategoryPagination.html":{},"injectables/ExcludeNullInterceptor.html":{},"classes/LengthLimits.html":{},"classes/RecordPagination.html":{},"classes/User.html":{},"classes/UserPagination.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.map(this.recursivelystripnullvalues",{"_index":732,"title":{},"body":{"injectables/ExcludeNullInterceptor.html":{}}}],["variable",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1222,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifytokenjwt",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifytokenjwt(token",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["void",{"_index":695,"title":{},"body":{"classes/ExceptionsFilter.html":{}}}],["warranties",{"_index":1187,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1183,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1103,"title":{},"body":{"index.html":{}}}],["website",{"_index":1135,"title":{},"body":{"index.html":{}}}],["where('category.id",{"_index":607,"title":{},"body":{"injectables/CategoryService.html":{}}}],["whether",{"_index":1200,"title":{},"body":{"license.html":{}}}],["without",{"_index":1157,"title":{},"body":{"license.html":{}}}],["world",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["wrong",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["yarn",{"_index":1098,"title":{},"body":{"index.html":{}}}],["yes",{"_index":440,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/RecordService.html":{},"injectables/UserService.html":{}}}],["you\"d",{"_index":1124,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{},"modules/RecordModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hello\n                        \n                        \n                    \n                \n            \n            \n                \nhello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app/app.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get()\n  hello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBookModule\n\nBookModule\n\nAppModule -->\n\nBookModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nRecordModule\n\nRecordModule\n\nAppModule -->\n\nRecordModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BookModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            RecordModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_FILTER, APP_GUARD } from '@nestjs/core/constants';\nimport { BookModule } from 'src/book/book.module';\nimport { CategoryModule } from 'src/category/category.module';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { ExceptionsFilter } from 'src/utils/exception-filter/exception.filter';\nimport { UserModule } from 'src/user/user.module';\nimport { AppController } from './app.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { RecordModule } from 'src/record/record.module';\nimport { RolesGuard } from 'src/role/role.guard';\n\n@Module({\n  controllers: [AppController],\n  imports: [\n    AuthModule,\n    BookModule,\n    CategoryModule,\n    ConfigModule.forRoot(),\n    DatabaseModule,\n    RecordModule,\n    UserModule,\n  ],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: ExceptionsFilter,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                loginGoogle\n                            \n                            \n                                    Async\n                                loginGoogleRedirect\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(request: IRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(request: IRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('signin')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loginGoogle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginGoogle(_request: IRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GoogleAuthGuard)@Get('google')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loginGoogleRedirect\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginGoogleRedirect(request: IRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GoogleAuthGuard)@Get('google/redirect')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(request: IRequest, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')@HttpCode(201)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Req, Body, HttpCode } from '@nestjs/common';\nimport { UseGuards } from '@nestjs/common/decorators';\nimport { CreateUserDto } from 'src/user/dto/create-user.dto';\nimport { UserService } from 'src/user/user.service';\nimport { AuthService } from './auth.service';\nimport { IRequest } from './auth.type';\nimport { GoogleAuthGuard } from './guard/google.guard';\nimport { JwtAuthGuard } from './guard/jwt.guard';\nimport { LocalAuthGuard } from './guard/local.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UserService,\n  ) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  @HttpCode(200)\n  getProfile(@Req() request: IRequest) {\n    return request.user;\n  }\n\n  @Post('signup')\n  @HttpCode(201)\n  async register(\n    @Req() request: IRequest,\n    @Body() createUserDto: CreateUserDto,\n  ) {\n    return this.userService.register(createUserDto);\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @Post('signin')\n  @HttpCode(200)\n  async login(@Req() request: IRequest) {\n    return this.authService.login(request.user);\n  }\n\n  @UseGuards(GoogleAuthGuard)\n  @Get('google')\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async loginGoogle(@Req() _request: IRequest) {}\n\n  @UseGuards(GoogleAuthGuard)\n  @Get('google/redirect')\n  async loginGoogleRedirect(@Req() request: IRequest) {\n    return this.authService.loginGoogle(request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthModule \n\nAuthModule \n\nAuthModule  -->\n\nAuthModule->AuthModule \n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UserModule } from 'src/user/user.module';\nimport { UserService } from 'src/user/user.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { GoogleStrategy } from './strategy/google.strategy';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport { LocalStrategy } from './strategy/local.strategy';\n\n@Module({\n  controllers: [AuthController],\n  exports: [AuthService, AuthModule],\n  imports: [\n    ConfigModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: process.env.JWT_EXPIRATION },\n    }),\n    PassportModule,\n    UserModule,\n  ],\n  providers: [\n    AuthService,\n    ConfigService,\n    GoogleStrategy,\n    JwtStrategy,\n    LocalStrategy,\n    UserService,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCookieWithJwtToken\n                            \n                            \n                                isMatchPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                loginGoogle\n                            \n                            \n                                    Async\n                                validateUserGoogle\n                            \n                            \n                                    Async\n                                validateUserJwt\n                            \n                            \n                                    Async\n                                validateUserLocal\n                            \n                            \n                                    Async\n                                verifyTokenJwt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCookieWithJwtToken\n                        \n                        \n                    \n                \n            \n            \n                \ngetCookieWithJwtToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isMatchPassword\n                        \n                        \n                    \n                \n            \n            \n                \nisMatchPassword(plainPassword: string, hashPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loginGoogle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginGoogle(req)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserGoogle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserGoogle(profile: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserJwt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserJwt(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserLocal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserLocal(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyTokenJwt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyTokenJwt(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserService } from 'src/user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { User } from 'src/user/user.entity';\nimport { Payload } from './auth.type';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n    private readonly userService: UserService,\n  ) {}\n\n  async validateUserLocal(username: string, password: string): Promise {\n    const user = await this.userService.findOneUsername(username);\n    if (!user) throw new UnauthorizedException();\n    if (!this.isMatchPassword(password, user.passwordHash))\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    return user;\n  }\n\n  async validateUserJwt(payload: Payload): Promise {\n    const user = await this.userService.findOnePayload(payload);\n    if (!user)\n      throw new HttpException('Invalid token', HttpStatus.UNAUTHORIZED);\n    return user;\n  }\n\n  async validateUserGoogle(profile: any): Promise {\n    const { emails } = profile;\n    const username = emails[0].value;\n    const user = await this.userService.findOneUsername(username);\n    // if (!user)\n    //   this.userService.register({\n    //     username: emails[0].value,\n    //     firstName: name.givenName,\n    //     lastName: name.familyName,\n    //   })\n    return user;\n  }\n\n  async verifyTokenJwt(token: string) {\n    const payload = (await this.jwtService.verify(token)) as Payload;\n    return this.validateUserJwt({\n      sub: payload.sub,\n      username: payload.username,\n    });\n  }\n\n  async login(user: User) {\n    const payload: Payload = { sub: user.id, username: user.username };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  getCookieWithJwtToken(user: User) {\n    const payload: Payload = { sub: user.id, username: user.username };\n    const token = this.jwtService.sign(payload);\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_EXPIRATION_TIME',\n    )}`;\n  }\n\n  async loginGoogle(req) {\n    if (!req.user) {\n      return 'no google user';\n    }\n    return {\n      message: 'Google user info',\n      user: req.user,\n    };\n  }\n\n  isMatchPassword(plainPassword: string, hashPassword: string): boolean {\n    return bcrypt.compareSync(plainPassword, hashPassword);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Book.html":{"url":"classes/Book.html","title":"class - Book","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Book\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/book.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                categories\n                            \n                            \n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isArchived\n                            \n                            \n                                isBusy\n                            \n                            \n                                name\n                            \n                            \n                                price\n                            \n                            \n                                records\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            categories\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, undefined, {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/book.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({name: 'created_at'})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/book.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, length: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/book.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/book.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isArchived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false, name: 'is_archived'})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/book.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isBusy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false, name: 'is_busy'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/book.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/book.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/book.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            records\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Record[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/book.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({name: 'updated_at'})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/book.entity.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import LengthLimits from '../constants/length';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToMany,\n  OneToMany,\n} from 'typeorm';\nimport { Category } from '../category/category.entity';\nimport { Record } from '../record/record.entity';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nexport class Book {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ length: LengthLimits.SMALL_MAX_LENGTH })\n  name: string;\n\n  @Column({ nullable: true, length: LengthLimits.BIG_MAX_LENGTH })\n  description: string;\n\n  @Column()\n  price: number;\n\n  @Column({ default: false, name: 'is_busy' })\n  isBusy: boolean;\n\n  @Column({ default: false, name: 'is_archived' })\n  @Exclude()\n  isArchived: boolean;\n\n  @CreateDateColumn({ name: 'created_at' })\n  @Exclude()\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  @Exclude()\n  updatedAt: Date;\n\n  @ManyToMany(() => Category, (category) => category.books, {\n    nullable: true,\n  })\n  categories?: Category[];\n\n  @OneToMany(() => Record, (record) => record.book, { nullable: true })\n  records: Record[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BookController.html":{"url":"controllers/BookController.html","title":"controller - BookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/book.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                book\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                borrow\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findBooks\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                return\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            borrow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    borrow(request: IRequest, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':id/borrow')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(request: IRequest, createBookDto: CreateBookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Roles(Role.ADMIN)@Post()@HttpCode(201)\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createBookDto\n                                    \n                                                CreateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findBooks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBooks(undefined: BookPagination)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                BookPagination\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Roles(Role.ADMIN)@Delete(':id')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            return\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    return(request: IRequest, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':id/return')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateBookDto: UpdateBookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Roles(Role.ADMIN)@Put(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/book/book.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateBookDto\n                                    \n                                                UpdateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  HttpCode,\n  Query,\n  HttpException,\n  HttpStatus,\n  Put,\n  Req,\n  Patch,\n  UseGuards,\n} from '@nestjs/common';\nimport { IRequest } from 'src/auth/auth.type';\nimport { JwtAuthGuard } from 'src/auth/guard/jwt.guard';\nimport { Roles } from 'src/role/role.decorator';\nimport { Role } from 'src/role/role.enum';\nimport { BookPagination } from 'src/utils/pagination/pagination';\nimport { UpdateResult } from 'typeorm';\nimport { Book } from './book.entity';\nimport { BookService } from './book.service';\nimport { CreateBookDto } from './dto/create-book.dto';\nimport { UpdateBookDto } from './dto/update-book.dto';\n\n@Controller('book')\nexport class BookController {\n  constructor(private readonly bookService: BookService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Roles(Role.ADMIN)\n  @Post()\n  @HttpCode(201)\n  async create(@Req() request: IRequest, @Body() createBookDto: CreateBookDto) {\n    console.error(createBookDto);\n\n    return this.bookService.create(createBookDto);\n  }\n\n  @Get()\n  @HttpCode(200)\n  async findBooks(@Query() { page, limit }: BookPagination) {\n    return this.bookService.findBooks(page, limit);\n  }\n\n  @Get(':id')\n  @HttpCode(200)\n  async findOne(@Param('id') id: number): Promise {\n    const book = await this.bookService.findOne(+id);\n    if (!book)\n      throw new HttpException(\n        'Book with this id does not exist',\n        HttpStatus.NOT_FOUND,\n      );\n    return book;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Roles(Role.ADMIN)\n  @Put(':id')\n  @HttpCode(200)\n  async update(\n    @Param('id') id: number,\n    @Body() updateBookDto: UpdateBookDto,\n  ): Promise {\n    return this.bookService.update(+id, updateBookDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Roles(Role.ADMIN)\n  @Delete(':id')\n  @HttpCode(204)\n  async remove(@Param('id') id: number): Promise {\n    return this.bookService.remove(+id);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id/borrow')\n  @HttpCode(200)\n  async borrow(\n    @Req() request: IRequest,\n    @Param('id') id: number,\n  ): Promise {\n    const book = await this.bookService.borrow(request.user.id, +id);\n    if (!book)\n      throw new HttpException(\n        'Book with this id does not exist',\n        HttpStatus.NOT_FOUND,\n      );\n    return book;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id/return')\n  @HttpCode(200)\n  async return(\n    @Req() request: IRequest,\n    @Param('id') id: number,\n  ): Promise {\n    const book = await this.bookService.return(request.user.id, +id);\n    if (!book)\n      throw new HttpException(\n        'Book with this id does not exist',\n        HttpStatus.NOT_FOUND,\n      );\n    return book;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BookModule.html":{"url":"modules/BookModule.html","title":"module - BookModule","body":"\n                   \n\n\n\n\n    Modules\n    BookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BookModule\n\n\n\ncluster_BookModule_imports\n\n\n\ncluster_BookModule_exports\n\n\n\ncluster_BookModule_providers\n\n\n\n\nRecordModule\n\nRecordModule\n\n\n\nBookModule\n\nBookModule\n\nBookModule -->\n\nRecordModule->BookModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nBookModule -->\n\nUserModule->BookModule\n\n\n\n\n\nBookModule \n\nBookModule \n\nBookModule  -->\n\nBookModule->BookModule \n\n\n\n\n\nBookService \n\nBookService \n\nBookService  -->\n\nBookModule->BookService \n\n\n\n\n\nBookService\n\nBookService\n\nBookModule -->\n\nBookService->BookModule\n\n\n\n\n\nRecordService\n\nRecordService\n\nBookModule -->\n\nRecordService->BookModule\n\n\n\n\n\nUserService\n\nUserService\n\nBookModule -->\n\nUserService->BookModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/book/book.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookService\n                        \n                        \n                            RecordService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BookController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RecordModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BookModule\n                        \n                        \n                            BookService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { BookController } from './book.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Book } from './book.entity';\nimport { UserService } from 'src/user/user.service';\nimport { RecordService } from 'src/record/record.service';\nimport { RecordModule } from 'src/record/record.module';\nimport { UserModule } from 'src/user/user.module';\n\n@Module({\n  controllers: [BookController],\n  exports: [BookService, BookModule, TypeOrmModule],\n  imports: [TypeOrmModule.forFeature([Book]), RecordModule, UserModule],\n  providers: [BookService, RecordService, UserService],\n})\nexport class BookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BookPagination.html":{"url":"classes/BookPagination.html","title":"class - BookPagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BookPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pagination/pagination.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                DEFAULT_LIMIT\n                            \n                            \n                                    Static\n                                DEFAULT_PAGE\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_LIMIT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 5\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_PAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            limit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            page\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class BookPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class CategoryPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class RecordPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BookService.html":{"url":"injectables/BookService.html","title":"injectable - BookService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  BookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/book.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                borrow\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findBooks\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                return\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bookRepo: Repository, recordService: RecordService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/book/book.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bookRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recordService\n                                                  \n                                                        \n                                                                        RecordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            borrow\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    borrow(userId: number, bookId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bookId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createBookDto: CreateBookDto)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createBookDto\n                                    \n                                                CreateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findBooks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBooks(page?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            return\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    return(userId: number, bookId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bookId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateBookDto: UpdateBookDto)\n                \n            \n\n\n            \n                \n                    Defined in src/book/book.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateBookDto\n                                    \n                                                UpdateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { RecordService } from 'src/record/record.service';\nimport { UserService } from 'src/user/user.service';\nimport { BookPagination } from 'src/utils/pagination/pagination';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { Book } from './book.entity';\nimport { CreateBookDto } from './dto/create-book.dto';\nimport { UpdateBookDto } from './dto/update-book.dto';\n\n@Injectable()\nexport class BookService {\n  constructor(\n    @InjectRepository(Book)\n    private readonly bookRepo: Repository,\n\n    private readonly recordService: RecordService,\n    private readonly userService: UserService,\n  ) {}\n\n  async create(createBookDto: CreateBookDto): Promise {\n    const book = new Book();\n    Object.assign(book, createBookDto);\n\n    return this.bookRepo.save(book).catch(() => {\n      throw new HttpException('Unable to add new book', HttpStatus.BAD_REQUEST);\n    });\n  }\n\n  async findBooks(page?: number, limit?: number) {\n    const currentPage = page || BookPagination.DEFAULT_PAGE;\n    const take = limit || BookPagination.DEFAULT_LIMIT;\n    const skip = (currentPage - 1) * take;\n\n    const [books, total] = await this.bookRepo\n      .findAndCount({\n        order: {\n          id: 'ASC',\n        },\n        where: {\n          isArchived: false,\n        },\n        take: take,\n        skip: skip,\n      })\n      .catch(() => {\n        throw new HttpException('Unable to find books', HttpStatus.BAD_REQUEST);\n      });\n\n    if (!books || books.length === 0)\n      throw new HttpException('Books unavailable', HttpStatus.NOT_FOUND);\n\n    return {\n      total: total,\n      page: currentPage,\n      count: books.length,\n      books: books,\n    };\n  }\n\n  async findOne(id: number): Promise {\n    return this.bookRepo\n      .findOne({\n        id: id,\n        isArchived: false,\n      })\n      .catch(() => {\n        throw new HttpException('Unable to find book', HttpStatus.BAD_REQUEST);\n      });\n  }\n\n  async update(\n    id: number,\n    updateBookDto: UpdateBookDto,\n  ): Promise {\n    return this.bookRepo.update(id, updateBookDto).catch(() => {\n      throw new HttpException(\n        \"Unable to update this book's information\",\n        HttpStatus.BAD_REQUEST,\n      );\n    });\n  }\n\n  async remove(id: number): Promise {\n    return this.bookRepo.update(id, { isArchived: true }).catch(() => {\n      throw new HttpException('Unable to delete book', HttpStatus.BAD_REQUEST);\n    });\n  }\n\n  async borrow(userId: number, bookId: number): Promise {\n    const [user, book] = await Promise.all([\n      this.userService.findOne(userId),\n      this.findOne(bookId),\n    ]);\n\n    if (!user || !book)\n      throw new HttpException('Wrong user or book', HttpStatus.BAD_REQUEST);\n\n    if (book.isBusy)\n      throw new HttpException(\n        'Book is unavailable for now',\n        HttpStatus.NOT_ACCEPTABLE,\n      );\n\n    book.isBusy = true;\n    const [borrowedBook, _record] = await Promise.all([\n      this.bookRepo.save(book),\n      this.recordService.create({\n        borrower: user,\n        book: book,\n        borrowedAt: new Date(Date.now()),\n      }),\n    ]);\n\n    return borrowedBook;\n  }\n\n  async return(userId: number, bookId: number): Promise {\n    const [user, book] = await Promise.all([\n      this.userService.findOne(userId),\n      this.findOne(bookId),\n    ]);\n\n    if (!user || !book)\n      throw new HttpException('Wrong user or book', HttpStatus.BAD_REQUEST);\n\n    if (!book.isBusy)\n      throw new HttpException('Not your book...', HttpStatus.NOT_ACCEPTABLE);\n\n    const record = await this.recordService.findBusyOne(userId, bookId);\n    if (!record)\n      throw new HttpException('Unable to return book', HttpStatus.CONFLICT);\n\n    book.isBusy = false;\n    const [borrowedBook, _record] = await Promise.all([\n      this.bookRepo.save(book),\n      this.recordService.update(record.id, {\n        returnedAt: new Date(Date.now()),\n      }),\n    ]);\n\n    return borrowedBook;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                books\n                            \n                            \n                                createdAt\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                isArchived\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            books\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Book[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, undefined, {nullable: true, eager: true})@JoinTable({name: 'category_books', joinColumn: undefined, inverseJoinColumn: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({name: 'created_at'})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, length: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isArchived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false, name: 'is_archived'})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true, length: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({name: 'updated_at'})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import LengthLimits from '../constants/length';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Book } from '../book/book.entity';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nexport class Category {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, length: LengthLimits.SMALL_MAX_LENGTH })\n  name: string;\n\n  @Column({ nullable: true, length: LengthLimits.BIG_MAX_LENGTH })\n  description: string;\n\n  @Column({ default: false, name: 'is_archived' })\n  @Exclude()\n  isArchived: boolean;\n\n  @CreateDateColumn({ name: 'created_at' })\n  @Exclude()\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  @Exclude()\n  updatedAt: Date;\n\n  @ManyToMany(() => Book, (book) => book.categories, {\n    nullable: true,\n    eager: true,\n  })\n  @JoinTable({\n    name: 'category_books',\n    joinColumn: {\n      name: 'category_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'book_id',\n      referencedColumnName: 'id',\n    },\n  })\n  books?: Book[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addNewBookToCategory\n                            \n                            \n                                    Async\n                                addOldBookToCategory\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findBooksOfOne\n                            \n                            \n                                    Async\n                                findCategories\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addNewBookToCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addNewBookToCategory(id: number, bookDto: CreateBookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Roles(Role.ADMIN)@Post(':id/book')@HttpCode(201)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bookDto\n                                    \n                                                CreateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addOldBookToCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addOldBookToCategory(id: number, bookId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Roles(Role.ADMIN)@Patch(':id/book')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bookId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Roles(Role.ADMIN)@Post()@HttpCode(201)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findBooksOfOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBooksOfOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/book')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findCategories\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findCategories(undefined: CategoryPagination)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CategoryPagination\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Roles(Role.ADMIN)@Delete(':id')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Roles(Role.ADMIN)@Patch(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  Query,\n  HttpException,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/auth/guard/jwt.guard';\nimport { Book } from 'src/book/book.entity';\nimport { CreateBookDto } from 'src/book/dto/create-book.dto';\nimport { Roles } from 'src/role/role.decorator';\nimport { Role } from 'src/role/role.enum';\nimport { CategoryPagination } from 'src/utils/pagination/pagination';\nimport { UpdateResult } from 'typeorm';\nimport { Category } from './category.entity';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Controller('category')\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Roles(Role.ADMIN)\n  @Post()\n  @HttpCode(201)\n  async create(\n    @Body() createCategoryDto: CreateCategoryDto,\n  ): Promise {\n    return this.categoryService.create(createCategoryDto);\n  }\n\n  @Get()\n  @HttpCode(200)\n  async findCategories(@Query() { page, limit }: CategoryPagination) {\n    return this.categoryService.findCategories(page, limit);\n  }\n\n  @Get(':id')\n  @HttpCode(200)\n  async findOne(@Param('id') id: number): Promise {\n    const category = await this.categoryService.findOne(+id);\n    if (!category)\n      throw new HttpException(\n        'Category with this id does not exist',\n        HttpStatus.NOT_FOUND,\n      );\n    return category;\n  }\n\n  @Get(':id/book')\n  @HttpCode(200)\n  async findBooksOfOne(@Param('id') id: number): Promise {\n    const books = await this.categoryService.findBooksOfOne(+id);\n    if (!books.length)\n      throw new HttpException(\n        'Category does not contain any books',\n        HttpStatus.NOT_FOUND,\n      );\n    return books;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Roles(Role.ADMIN)\n  @Post(':id/book')\n  @HttpCode(201)\n  async addNewBookToCategory(\n    @Param('id') id: number,\n    @Body() bookDto: CreateBookDto,\n  ): Promise {\n    return this.categoryService.addNewBookToCategory(id, bookDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Roles(Role.ADMIN)\n  @Patch(':id/book')\n  @HttpCode(200)\n  async addOldBookToCategory(\n    @Param('id') id: number,\n    @Body('bookId') bookId: number,\n  ): Promise {\n    return this.categoryService.addOldBookToCategory(id, bookId);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Roles(Role.ADMIN)\n  @Patch(':id')\n  @HttpCode(200)\n  async update(\n    @Param('id') id: number,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    return this.categoryService.update(+id, updateCategoryDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Roles(Role.ADMIN)\n  @Delete(':id')\n  @HttpCode(204)\n  async remove(@Param('id') id: number): Promise {\n    return this.categoryService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_exports\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nBookModule\n\nBookModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nBookModule->CategoryModule\n\n\n\n\n\nCategoryModule \n\nCategoryModule \n\nCategoryModule  -->\n\nCategoryModule->CategoryModule \n\n\n\n\n\nCategoryService \n\nCategoryService \n\nCategoryService  -->\n\nCategoryModule->CategoryService \n\n\n\n\n\nBookService\n\nBookService\n\nCategoryModule -->\n\nBookService->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nRecordService\n\nRecordService\n\nCategoryModule -->\n\nRecordService->CategoryModule\n\n\n\n\n\nUserService\n\nUserService\n\nCategoryModule -->\n\nUserService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookService\n                        \n                        \n                            CategoryService\n                        \n                        \n                            RecordService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BookModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CategoryModule\n                        \n                        \n                            CategoryService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { Category } from './category.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { BookService } from 'src/book/book.service';\nimport { Record } from 'src/record/record.entity';\nimport { BookModule } from 'src/book/book.module';\nimport { RecordService } from 'src/record/record.service';\nimport { UserService } from 'src/user/user.service';\nimport { User } from 'src/user/user.entity';\n\n@Module({\n  controllers: [CategoryController],\n  exports: [CategoryService, CategoryModule, TypeOrmModule],\n  imports: [TypeOrmModule.forFeature([Category, Record, User]), BookModule],\n  providers: [BookService, CategoryService, RecordService, UserService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryPagination.html":{"url":"classes/CategoryPagination.html","title":"class - CategoryPagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pagination/pagination.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                DEFAULT_LIMIT\n                            \n                            \n                                    Static\n                                DEFAULT_PAGE\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_LIMIT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 5\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_PAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            limit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            page\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:46\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class BookPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class CategoryPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class RecordPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addNewBookToCategory\n                            \n                            \n                                    Async\n                                addOldBookToCategory\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findBooksOfOne\n                            \n                            \n                                    Async\n                                findCategories\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneName\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepo: Repository, bookService: BookService)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bookService\n                                                  \n                                                        \n                                                                        BookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addNewBookToCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addNewBookToCategory(categoryId: number, bookDto: CreateBookDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bookDto\n                                    \n                                                CreateBookDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addOldBookToCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addOldBookToCategory(categoryId: number, bookId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bookId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findBooksOfOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBooksOfOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findCategories\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findCategories(page?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Book } from 'src/book/book.entity';\nimport { BookService } from 'src/book/book.service';\nimport { CreateBookDto } from 'src/book/dto/create-book.dto';\nimport { CategoryPagination } from 'src/utils/pagination/pagination';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { Category } from './category.entity';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectRepository(Category)\n    private readonly categoryRepo: Repository,\n\n    private readonly bookService: BookService,\n  ) {}\n\n  async create(createCategoryDto: CreateCategoryDto) {\n    const category = new Category();\n    Object.assign(category, createCategoryDto);\n\n    if (await this.findOneName(category.name))\n      throw new HttpException(\n        'Already existed category name',\n        HttpStatus.BAD_REQUEST,\n      );\n\n    return this.categoryRepo.save(category).catch(() => {\n      throw new HttpException(\n        'Unable to add new category',\n        HttpStatus.BAD_REQUEST,\n      );\n    });\n  }\n\n  async addOldBookToCategory(\n    categoryId: number,\n    bookId: number,\n  ): Promise {\n    const [category, book] = await Promise.all([\n      this.findOne(categoryId),\n      this.bookService.findOne(bookId),\n    ]);\n\n    if (!category || !book)\n      throw new HttpException('Wrong category or book', HttpStatus.BAD_REQUEST);\n\n    if (\n      await this.categoryRepo\n        .createQueryBuilder('category')\n        .leftJoinAndSelect('category.books', 'books')\n        .where('category.id = :categoryId', { categoryId: categoryId })\n        .andWhere('books.id = :bookId', { bookId: bookId })\n        .getOne()\n        .catch(() => {\n          throw new HttpException(\n            'Unable to find book',\n            HttpStatus.BAD_REQUEST,\n          );\n        })\n    )\n      throw new HttpException(\n        'Category already has this book',\n        HttpStatus.CONFLICT,\n      );\n\n    category.books.push(book);\n    await this.categoryRepo.save(category);\n    return category;\n  }\n\n  async addNewBookToCategory(\n    categoryId: number,\n    bookDto: CreateBookDto,\n  ): Promise {\n    const category = await this.findOne(categoryId);\n    const book = await this.bookService.create(bookDto);\n    category.books.push(book);\n    await this.categoryRepo.save(category);\n    return category;\n  }\n\n  async findCategories(page?: number, limit?: number) {\n    const currentPage = page || CategoryPagination.DEFAULT_PAGE;\n    const take = limit || CategoryPagination.DEFAULT_LIMIT;\n    const skip = (currentPage - 1) * take;\n\n    const [categories, total] = await this.categoryRepo\n      .findAndCount({\n        order: {\n          id: 'ASC',\n        },\n        where: {\n          isArchived: false,\n        },\n        take: take,\n        skip: skip,\n      })\n      .catch(() => {\n        throw new HttpException(\n          'Unable to find categories',\n          HttpStatus.BAD_REQUEST,\n        );\n      });\n\n    if (!categories || categories.length === 0)\n      throw new HttpException('Categories unavailable', HttpStatus.NOT_FOUND);\n\n    return {\n      total: total,\n      page: currentPage,\n      count: categories.length,\n      categories: categories,\n    };\n  }\n\n  async findOne(id: number): Promise {\n    return this.categoryRepo\n      .findOne(\n        {\n          id: id,\n          isArchived: false,\n        },\n        { relations: ['books'] },\n      )\n      .catch(() => {\n        throw new HttpException(\n          'Unable to find category',\n          HttpStatus.BAD_REQUEST,\n        );\n      });\n  }\n\n  async findOneName(name: string): Promise {\n    return this.categoryRepo\n      .findOne({ name: name, isArchived: false })\n      .catch(() => {\n        throw new HttpException(\n          'Unable to find category',\n          HttpStatus.BAD_REQUEST,\n        );\n      });\n  }\n\n  async findBooksOfOne(id: number): Promise {\n    return (await this.findOne(id)).books;\n  }\n\n  async update(\n    id: number,\n    updateCategoryDto: UpdateCategoryDto,\n  ): Promise {\n    return this.categoryRepo.update(id, updateCategoryDto).catch(() => {\n      throw new HttpException(\n        \"Unable to update this category's information\",\n        HttpStatus.BAD_REQUEST,\n      );\n    });\n  }\n\n  async remove(id: number): Promise {\n    return this.categoryRepo.update(id, { isArchived: true }).catch(() => {\n      throw new HttpException(\n        'Unable to delete category',\n        HttpStatus.BAD_REQUEST,\n      );\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBookDto.html":{"url":"classes/CreateBookDto.html","title":"class - CreateBookDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBookDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/dto/create-book.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                isArchived\n                            \n                            \n                                    Optional\n                                isBusy\n                            \n                            \n                                name\n                            \n                            \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsOptional()@MaxLength(LengthLimits.BIG_MAX_LENGTH)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/dto/create-book.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            isArchived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/dto/create-book.dto.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            isBusy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/dto/create-book.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Length(LengthLimits.MIN_LENGTH, LengthLimits.SMALL_MAX_LENGTH)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/dto/create-book.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@Min(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/book/dto/create-book.dto.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n  MaxLength,\n  Min,\n} from 'class-validator';\nimport LengthLimits from 'src/constants/length';\n// import LengthLimits from '../../constants/length';\n\nexport class CreateBookDto {\n  @IsString()\n  @IsNotEmpty()\n  @Length(LengthLimits.MIN_LENGTH, LengthLimits.SMALL_MAX_LENGTH)\n  name: string;\n\n  @IsString()\n  @IsOptional()\n  @MaxLength(LengthLimits.BIG_MAX_LENGTH)\n  description?: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @Min(1)\n  price: number;\n\n  @IsBoolean()\n  @IsOptional()\n  isBusy?: boolean;\n\n  @IsBoolean()\n  @IsOptional()\n  isArchived?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                isArchived\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsOptional()@MaxLength(LengthLimits.BIG_MAX_LENGTH)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/dto/create-category.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            isArchived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/dto/create-category.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Length(LengthLimits.MIN_LENGTH, LengthLimits.SMALL_MAX_LENGTH)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/dto/create-category.dto.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n  MaxLength,\n} from 'class-validator';\nimport LengthLimits from 'src/constants/length';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  @Length(LengthLimits.MIN_LENGTH, LengthLimits.SMALL_MAX_LENGTH)\n  name: string;\n\n  @IsString()\n  @IsOptional()\n  @MaxLength(LengthLimits.BIG_MAX_LENGTH)\n  description?: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isArchived?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRecordDto.html":{"url":"classes/CreateRecordDto.html","title":"class - CreateRecordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRecordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/record/dto/create-record.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                book\n                            \n                            \n                                    Optional\n                                borrowedAt\n                            \n                            \n                                borrower\n                            \n                            \n                                    Optional\n                                isArchived\n                            \n                            \n                                    Optional\n                                returnedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            book\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Book\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsInstance(Book)@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/dto/create-record.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            borrowedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/dto/create-record.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            borrower\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsInstance(User)@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/dto/create-record.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            isArchived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/dto/create-record.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            returnedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/dto/create-record.dto.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsDate,\n  IsInstance,\n  IsNotEmpty,\n  IsOptional,\n} from 'class-validator';\nimport { Book } from 'src/book/book.entity';\nimport { User } from 'src/user/user.entity';\n\nexport class CreateRecordDto {\n  @IsInstance(User)\n  @IsNotEmpty()\n  borrower: User;\n\n  @IsInstance(Book)\n  @IsNotEmpty()\n  book: Book;\n\n  @IsDate()\n  @IsOptional()\n  borrowedAt?: Date;\n\n  @IsDate()\n  @IsOptional()\n  returnedAt?: Date;\n\n  @IsBoolean()\n  @IsOptional()\n  isArchived?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                firstName\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Length(LengthLimits.MIN_LENGTH, LengthLimits.SMALL_MAX_LENGTH)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/create-user.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/create-user.dto.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Length(LengthLimits.MIN_LENGTH, LengthLimits.SMALL_MAX_LENGTH)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/create-user.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Length(LengthLimits.PASSWORD_PLAIN_MIN_LENGTH, LengthLimits.PASSWORD_PLAIN_MAX_LENGTH)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/create-user.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/dto/create-user.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsBoolean,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\nimport LengthLimits from 'src/constants/length';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  //required, due to the maximum length of bcrypt hash = 72\n  @Length(\n    LengthLimits.PASSWORD_PLAIN_MIN_LENGTH,\n    LengthLimits.PASSWORD_PLAIN_MAX_LENGTH,\n  )\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(LengthLimits.MIN_LENGTH, LengthLimits.SMALL_MAX_LENGTH)\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(LengthLimits.MIN_LENGTH, LengthLimits.SMALL_MAX_LENGTH)\n  lastName: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isAdmin: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport * as path from 'path';\nimport * as ormConfig from '../../ormconfig';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      useFactory: () => {\n        const config = Object.assign({}, ormConfig);\n        config.entities = [path.join(process.cwd(), 'dist', '**/*.entity.js')];\n        return config as TypeOrmModuleOptions;\n      },\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionsFilter.html":{"url":"classes/ExceptionsFilter.html","title":"class - ExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exception-filter/exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: unknown, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exception-filter/exception.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\n\n@Catch()\nexport class ExceptionsFilter implements ExceptionFilter {\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n\n    let statusCode: number, statusMessage: string;\n    if (exception instanceof HttpException) {\n      statusCode = exception.getStatus();\n      statusMessage = exception.getResponse() as string;\n    } else {\n      statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n      statusMessage = 'Internal Server Error';\n    }\n\n    response.status(statusCode).json({\n      statusCode: statusCode,\n      statusMessage: statusMessage,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExcludeNullInterceptor.html":{"url":"injectables/ExcludeNullInterceptor.html","title":"injectable - ExcludeNullInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ExcludeNullInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/interceptor/excludeNull.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                recursivelyStripNullValues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/interceptor/excludeNull.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            recursivelyStripNullValues\n                        \n                        \n                    \n                \n            \n            \n                \nrecursivelyStripNullValues(value: unknown)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/interceptor/excludeNull.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            unknown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ExcludeNullInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(map((value) => this.recursivelyStripNullValues(value)));\n  }\n\n  recursivelyStripNullValues(value: unknown): unknown {\n    if (Array.isArray(value)) {\n      return value.map(this.recursivelyStripNullValues);\n    }\n    if (value !== null && typeof value === 'object') {\n      return Object.fromEntries(\n        Object.entries(value).map(([key, value]) => [\n          key,\n          this.recursivelyStripNullValues(value),\n        ]),\n      );\n    }\n    if (value !== null) {\n      return value;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthGuard.html":{"url":"injectables/GoogleAuthGuard.html","title":"injectable - GoogleAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/google.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GoogleAuthGuard extends AuthGuard('google') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/google.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/google.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/google.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-google-oauth20';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      clientID: configService.get('GOOGLE_CLIENT_ID'),\n      clientSecret: configService.get('GOOGLE_CLIENT_SECRET'),\n      callbackURL: configService.get('GOOGLE_CALLBACK_URL'),\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n  ): Promise {\n    if (!profile) throw new BadRequestException();\n    const { name, emails } = profile;\n    return {\n      username: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      accessToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRequest.html":{"url":"interfaces/IRequest.html","title":"interface - IRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.type.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from '@nestjs/common';\nimport { User } from 'src/user/user.entity';\n\nexport type AuthResponse = {\n  access_token: string;\n};\n\nexport type Payload = {\n  sub: number;\n  username: string;\n};\n\nexport type JwtUser = {\n  userId: number;\n  username: string;\n};\n\nexport interface IRequest extends Request {\n  user: User & {\n    auth?: AuthResponse;\n  };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Payload } from '../auth.type';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: Payload) {\n    return this.authService.validateUserJwt(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LengthLimits.html":{"url":"classes/LengthLimits.html","title":"class - LengthLimits","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LengthLimits\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/constants/length.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                BIG_MAX_LENGTH\n                            \n                            \n                                    Static\n                                    Readonly\n                                MIN_LENGTH\n                            \n                            \n                                    Static\n                                    Readonly\n                                PASSWORD_HASH_LENGTH\n                            \n                            \n                                    Static\n                                    Readonly\n                                PASSWORD_PLAIN_MAX_LENGTH\n                            \n                            \n                                    Static\n                                    Readonly\n                                PASSWORD_PLAIN_MIN_LENGTH\n                            \n                            \n                                    Static\n                                    Readonly\n                                SMALL_MAX_LENGTH\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            BIG_MAX_LENGTH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 2047\n                        \n                    \n                        \n                            \n                                    Defined in src/constants/length.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            MIN_LENGTH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/constants/length.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            PASSWORD_HASH_LENGTH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 72\n                        \n                    \n                        \n                            \n                                    Defined in src/constants/length.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            PASSWORD_PLAIN_MAX_LENGTH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 64\n                        \n                    \n                        \n                            \n                                    Defined in src/constants/length.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            PASSWORD_PLAIN_MIN_LENGTH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 8\n                        \n                    \n                        \n                            \n                                    Defined in src/constants/length.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            SMALL_MAX_LENGTH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 255\n                        \n                    \n                        \n                            \n                                    Defined in src/constants/length.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class LengthLimits {\n  public static readonly MIN_LENGTH = 1;\n  public static readonly SMALL_MAX_LENGTH = 255;\n  public static readonly BIG_MAX_LENGTH = 2047;\n  public static readonly PASSWORD_HASH_LENGTH = 72;\n  public static readonly PASSWORD_PLAIN_MIN_LENGTH = 8;\n  public static readonly PASSWORD_PLAIN_MAX_LENGTH = 64;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/local.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/local.strategy.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { User } from 'src/user/user.entity';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy, 'local') {\n  constructor(private readonly authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    return this.authService.validateUserLocal(username, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Record.html":{"url":"classes/Record.html","title":"class - Record","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Record\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/record/record.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                book\n                            \n                            \n                                bookId\n                            \n                            \n                                borrowedAt\n                            \n                            \n                                borrower\n                            \n                            \n                                borrowerId\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                isArchived\n                            \n                            \n                                returnedAt\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            book\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Book\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: true})@JoinColumn({name: 'book_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/record.entity.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bookId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, name: 'book_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/record.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            borrowedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'borrowed_at'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/record.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            borrower\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {nullable: true})@JoinColumn({name: 'borrower_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/record.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            borrowerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, name: 'borrower_id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/record.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({name: 'created_at'})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/record.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/record.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isArchived\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false, name: 'is_archived'})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/record.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            returnedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'returned_at'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/record.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({name: 'updated_at'})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/record/record.entity.ts:41\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Book } from '../book/book.entity';\nimport { User } from '../user/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nexport class Record {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ nullable: true, name: 'borrower_id' })\n  borrowerId: number;\n\n  @Column({ nullable: true, name: 'book_id' })\n  bookId: number;\n\n  @Column({ default: false, name: 'is_archived' })\n  @Exclude()\n  isArchived: boolean;\n\n  @Column({ name: 'borrowed_at' })\n  borrowedAt: Date;\n\n  @Column({ name: 'returned_at' })\n  returnedAt: Date;\n\n  @CreateDateColumn({ name: 'created_at' })\n  @Exclude()\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  @Exclude()\n  updatedAt: Date;\n\n  @ManyToOne(() => User, (user) => user.records, { nullable: true })\n  @JoinColumn({ name: 'borrower_id' })\n  borrower: User;\n\n  @ManyToOne(() => Book, (book) => book.records, { nullable: true })\n  @JoinColumn({ name: 'book_id' })\n  book: Book;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecordController.html":{"url":"controllers/RecordController.html","title":"controller - RecordController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecordController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/record/record.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                record\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findRecords\n                            \n                            \n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/record/record.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findRecords\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findRecords(undefined: RecordPagination)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/record/record.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RecordPagination\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/record/record.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Delete,\n  HttpCode,\n  Query,\n  HttpException,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { RecordPagination } from 'src/utils/pagination/pagination';\nimport { UpdateResult } from 'typeorm';\nimport { RecordService } from './record.service';\nimport { Record } from './record.entity';\nimport { JwtAuthGuard } from 'src/auth/guard/jwt.guard';\nimport { Role } from 'src/role/role.enum';\nimport { Roles } from 'src/role/role.decorator';\n\n@UseGuards(JwtAuthGuard)\n@Roles(Role.ADMIN)\n@Controller('record')\nexport class RecordController {\n  constructor(private readonly recordService: RecordService) {}\n\n  @Get()\n  @HttpCode(200)\n  async findRecords(@Query() { page, limit }: RecordPagination) {\n    return this.recordService.findRecords(page, limit);\n  }\n\n  @Get(':id')\n  @HttpCode(200)\n  async findOne(@Param('id') id: number): Promise {\n    const record = await this.recordService.findOne(+id);\n    if (!record)\n      throw new HttpException(\n        'Record with this id does not exist',\n        HttpStatus.NOT_FOUND,\n      );\n    return record;\n  }\n\n  @Delete(':id')\n  @HttpCode(204)\n  async remove(@Param('id') id: number): Promise {\n    return this.recordService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecordModule.html":{"url":"modules/RecordModule.html","title":"module - RecordModule","body":"\n                   \n\n\n\n\n    Modules\n    RecordModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecordModule\n\n\n\ncluster_RecordModule_exports\n\n\n\ncluster_RecordModule_providers\n\n\n\n\nRecordModule \n\nRecordModule \n\n\n\nRecordService \n\nRecordService \n\n\n\nRecordModule\n\nRecordModule\n\nRecordModule  -->\n\nRecordModule->RecordModule \n\n\n\nRecordService  -->\n\nRecordModule->RecordService \n\n\n\n\n\nRecordService\n\nRecordService\n\nRecordModule -->\n\nRecordService->RecordModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/record/record.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecordService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecordController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RecordModule\n                        \n                        \n                            RecordService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RecordService } from './record.service';\nimport { RecordController } from './record.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Record } from './record.entity';\n\n@Module({\n  controllers: [RecordController],\n  exports: [RecordService, RecordModule, TypeOrmModule],\n  imports: [TypeOrmModule.forFeature([Record])],\n  providers: [RecordService],\n})\nexport class RecordModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecordPagination.html":{"url":"classes/RecordPagination.html","title":"class - RecordPagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecordPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pagination/pagination.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                DEFAULT_LIMIT\n                            \n                            \n                                    Static\n                                DEFAULT_PAGE\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_LIMIT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 5\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_PAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            limit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            page\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:63\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class BookPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class CategoryPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class RecordPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecordService.html":{"url":"injectables/RecordService.html","title":"injectable - RecordService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RecordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/record/record.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findBusyOne\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findRecords\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recordRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/record/record.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recordRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRecordDto: CreateRecordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/record/record.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRecordDto\n                                    \n                                                CreateRecordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findBusyOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBusyOne(userId: number, bookId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/record/record.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bookId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/record/record.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findRecords\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findRecords(page?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/record/record.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/record/record.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateRecordDto: UpdateRecordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/record/record.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateRecordDto\n                                    \n                                                UpdateRecordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { IsEmpty, IsNotEmpty } from 'class-validator';\nimport { RecordPagination } from 'src/utils/pagination/pagination';\nimport { Repository, UpdateResult } from 'typeorm';\nimport { CreateRecordDto } from './dto/create-record.dto';\nimport { UpdateRecordDto } from './dto/update-record.dto';\nimport { Record } from './record.entity';\n\n@Injectable()\nexport class RecordService {\n  constructor(\n    @InjectRepository(Record)\n    private readonly recordRepo: Repository,\n  ) {}\n\n  async create(createRecordDto: CreateRecordDto) {\n    const record = new Record();\n    Object.assign(record, createRecordDto);\n\n    return this.recordRepo.save(record).catch(() => {\n      throw new HttpException(\n        'Unable to add new category',\n        HttpStatus.BAD_REQUEST,\n      );\n    });\n  }\n\n  async findRecords(page?: number, limit?: number) {\n    const currentPage = page || RecordPagination.DEFAULT_PAGE;\n    const take = limit || RecordPagination.DEFAULT_LIMIT;\n    const skip = (currentPage - 1) * take;\n\n    const [records, total] = await this.recordRepo\n      .findAndCount({\n        order: {\n          id: 'ASC',\n        },\n        where: {\n          isArchived: false,\n        },\n        take: take,\n        skip: skip,\n      })\n      .catch(() => {\n        throw new HttpException(\n          'Unable to find records',\n          HttpStatus.BAD_REQUEST,\n        );\n      });\n\n    if (!records || records.length === 0)\n      throw new HttpException('Records unavailable', HttpStatus.NOT_FOUND);\n\n    return {\n      total: total,\n      page: currentPage,\n      count: records.length,\n      records: records,\n    };\n  }\n\n  async findOne(id: number): Promise {\n    return this.recordRepo.findOne({ id: id, isArchived: false }).catch(() => {\n      throw new HttpException('Unable to find record', HttpStatus.BAD_REQUEST);\n    });\n  }\n\n  async findBusyOne(userId: number, bookId: number) {\n    return this.recordRepo\n      .findOne(\n        { borrowerId: userId, bookId: bookId },\n        {\n          where: {\n            borrowedAt: IsNotEmpty(),\n            returnedAt: IsEmpty(),\n          },\n        },\n      )\n      .catch(() => {\n        throw new HttpException(\n          'Unable to find record',\n          HttpStatus.BAD_REQUEST,\n        );\n      });\n  }\n\n  async update(\n    id: number,\n    updateRecordDto: UpdateRecordDto,\n  ): Promise {\n    return this.recordRepo.update(id, updateRecordDto).catch(() => {\n      throw new HttpException(\n        \"Unable to update this record's information\",\n        HttpStatus.BAD_REQUEST,\n      );\n    });\n  }\n\n  async remove(id: number): Promise {\n    return this.recordRepo.update(id, { isArchived: true }).catch(() => {\n      throw new HttpException(\n        'Unable to delete record',\n        HttpStatus.BAD_REQUEST,\n      );\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/role/role.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/role/role.guard.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthService } from 'src/auth/auth.service';\nimport { ROLES_KEY } from './role.decorator';\nimport { Role } from './role.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization.substring('Bearer '.length);\n    const user = await this.authService.verifyTokenJwt(token);\n\n    const roles = [];\n    if (user.isAdmin) roles.push(Role.USER, Role.ADMIN);\n    else roles.push(Role.USER);\n\n    return requiredRoles.some((role) => roles.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignedInUserDto.html":{"url":"classes/SignedInUserDto.html","title":"class - SignedInUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignedInUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/signed-in.user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class SignedInUserDto extends PickType(CreateUserDto, [\n  'username',\n  'password',\n] as const) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBookDto.html":{"url":"classes/UpdateBookDto.html","title":"class - UpdateBookDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBookDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/book/dto/update-book.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateBookDto } from './create-book.dto';\n\nexport class UpdateBookDto extends PartialType(\n  OmitType(CreateBookDto, ['name'] as const),\n) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(\n  OmitType(CreateCategoryDto, ['name'] as const),\n) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRecordDto.html":{"url":"classes/UpdateRecordDto.html","title":"class - UpdateRecordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRecordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/record/dto/update-record.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { CreateRecordDto } from './create-record.dto';\n\nexport class UpdateRecordDto extends PartialType(\n  OmitType(CreateRecordDto, ['borrower', 'book'] as const),\n) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PickType(CreateUserDto, [\n  'password',\n  'firstName',\n  'lastName',\n] as const) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                isAdmin\n                            \n                            \n                                    Static\n                                KEY_MAP\n                            \n                            \n                                lastName\n                            \n                            \n                                passwordHash\n                            \n                            \n                                records\n                            \n                            \n                                roles\n                            \n                            \n                                updatedAt\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn({name: 'created_at'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'first_name', length: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false, name: 'is_admin'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            KEY_MAP\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    'username',\n    'passwordHash',\n    'firstName',\n    'lastName',\n    'isAdmin',\n  ]\n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'last_name', length: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwordHash\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({name: 'password_hash', length: undefined})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            records\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Record[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {nullable: true})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Role[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn({name: 'updated_at'})@Exclude()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true, length: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import LengthLimits from '../constants/length';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport { Record } from '../record/record.entity';\nimport { Role } from 'src/role/role.enum';\n\n@Entity()\nexport class User {\n  static KEY_MAP = [\n    'username',\n    'passwordHash',\n    'firstName',\n    'lastName',\n    'isAdmin',\n  ];\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, length: LengthLimits.SMALL_MAX_LENGTH })\n  username: string;\n\n  @Column({ name: 'password_hash', length: LengthLimits.PASSWORD_HASH_LENGTH })\n  @Exclude()\n  passwordHash: string;\n\n  @Column({ name: 'first_name', length: LengthLimits.SMALL_MAX_LENGTH })\n  firstName: string;\n\n  @Column({ name: 'last_name', length: LengthLimits.SMALL_MAX_LENGTH })\n  lastName: string;\n\n  @Column({ default: false, name: 'is_admin' })\n  isAdmin: boolean;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  @Exclude()\n  updatedAt: Date;\n\n  @OneToMany(() => Record, (record) => record.borrower, { nullable: true })\n  @Exclude()\n  records: Record[];\n\n  roles: Role[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findUsers\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(request: IRequest, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUsers(undefined: UserPagination)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Get()@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserPagination\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(request: IRequest, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Delete(':id')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(request: IRequest, id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                IRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  UseGuards,\n  HttpCode,\n  HttpException,\n  HttpStatus,\n  Req,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserPagination } from 'src/utils/pagination/pagination';\nimport { JwtAuthGuard } from 'src/auth/guard/jwt.guard';\nimport { User } from './user.entity';\nimport { DeleteResult, UpdateResult } from 'typeorm';\nimport { Roles } from 'src/role/role.decorator';\nimport { Role } from 'src/role/role.enum';\nimport { IRequest } from 'src/auth/auth.type';\n\n@UseGuards(JwtAuthGuard)\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Roles(Role.ADMIN)\n  @Get()\n  @HttpCode(200)\n  async findUsers(@Query() { page, limit }: UserPagination) {\n    return this.userService.findUsers(page, limit);\n  }\n\n  @Get(':id')\n  @HttpCode(200)\n  async findOne(\n    @Req() request: IRequest,\n    @Param('id') id: number,\n  ): Promise {\n    const currentUser = request.user;\n    if (currentUser.isAdmin || currentUser.id === id) {\n      const user = await this.userService.findOne(+id);\n      if (!user)\n        throw new HttpException(\n          'User with this id does not exist',\n          HttpStatus.NOT_FOUND,\n        );\n      return user;\n    }\n    throw new HttpException('Forbidden resource', HttpStatus.FORBIDDEN);\n  }\n\n  @Patch(':id')\n  @HttpCode(200)\n  async update(\n    @Req() request: IRequest,\n    @Param('id') id: number,\n    @Body() updateUserDto: UpdateUserDto,\n  ): Promise {\n    const currentUser = request.user;\n    if (currentUser.isAdmin || currentUser.id === id) {\n      return this.userService.update(id, updateUserDto);\n    }\n    throw new HttpException('Forbidden resource', HttpStatus.FORBIDDEN);\n  }\n\n  @Roles(Role.ADMIN)\n  @Delete(':id')\n  @HttpCode(204)\n  async remove(\n    @Req() request: IRequest,\n    @Param('id') id: number,\n  ): Promise {\n    const currentUser = request.user;\n    if (currentUser.isAdmin || currentUser.id === id) {\n      return this.userService.remove(+id);\n    }\n    throw new HttpException('Forbidden resource', HttpStatus.FORBIDDEN);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserModule \n\nUserModule \n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserModule  -->\n\nUserModule->UserModule \n\n\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserModule\n                        \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  controllers: [UserController],\n  exports: [UserService, UserModule, TypeOrmModule],\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserPagination.html":{"url":"classes/UserPagination.html","title":"class - UserPagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pagination/pagination.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                DEFAULT_LIMIT\n                            \n                            \n                                    Static\n                                DEFAULT_PAGE\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_LIMIT\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 5\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            DEFAULT_PAGE\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 1\n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            limit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            page\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/utils/pagination/pagination.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class BookPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class CategoryPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\nexport class RecordPagination {\n  static DEFAULT_PAGE = 1;\n  static DEFAULT_LIMIT = 5;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                SALT_ROUNDS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOnePayload\n                            \n                            \n                                    Async\n                                findOneUsername\n                            \n                            \n                                    Async\n                                findUsers\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOnePayload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOnePayload(payload: Payload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                Payload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUsers(page?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(plainPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            SALT_ROUNDS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.service.ts:17\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DeleteResult, Repository, UpdateResult } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { UserPagination } from 'src/utils/pagination/pagination';\nimport { Payload } from 'src/auth/auth.type';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User) private readonly userRepo: Repository,\n  ) {}\n\n  readonly SALT_ROUNDS = 10;\n\n  async register(createUserDto: CreateUserDto): Promise {\n    const user: User = new User();\n    user.passwordHash = await this.hashPassword(createUserDto.password);\n    User.KEY_MAP.forEach((key) => {\n      user[key] = user[key] || createUserDto[key];\n    });\n\n    if (await this.findOneUsername(user.username))\n      throw new HttpException(\n        'Already existed username',\n        HttpStatus.BAD_REQUEST,\n      );\n\n    return this.userRepo.save(user).catch((error) => {\n      throw new HttpException(\n        'Unable to register a new user ' + error,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    });\n  }\n\n  async hashPassword(plainPassword: string): Promise {\n    return bcrypt.hash(plainPassword, this.SALT_ROUNDS).catch((error) => {\n      throw new Error('Password Hash ' + error);\n    });\n  }\n\n  async findUsers(page?: number, limit?: number) {\n    const currentPage = page || UserPagination.DEFAULT_PAGE;\n    const take = limit || UserPagination.DEFAULT_LIMIT;\n    const skip = (currentPage - 1) * take;\n\n    const [users, total] = await this.userRepo\n      .findAndCount({\n        order: {\n          id: 'ASC',\n        },\n        where: {\n          isArchived: false,\n        },\n        take: take,\n        skip: skip,\n      })\n      .catch(() => {\n        throw new HttpException('Unable to find users', HttpStatus.BAD_REQUEST);\n      });\n\n    if (!users || users.length === 0)\n      throw new HttpException('Users unavailable', HttpStatus.NOT_FOUND);\n\n    return {\n      total: total,\n      page: currentPage,\n      count: users.length,\n      users: users,\n    };\n  }\n\n  async findOne(id: number): Promise {\n    return this.userRepo.findOne(id).catch(() => {\n      throw new HttpException('Unable to find user', HttpStatus.BAD_REQUEST);\n    });\n  }\n\n  async findOneUsername(username: string): Promise {\n    return this.userRepo.findOne({ username: username }).catch(() => {\n      throw new HttpException('Unable to find user', HttpStatus.BAD_REQUEST);\n    });\n  }\n\n  async findOnePayload(payload: Payload): Promise {\n    return this.userRepo\n      .findOne({\n        id: payload.sub,\n        username: payload.username,\n      })\n      .catch(() => {\n        throw new HttpException('Unable to find user', HttpStatus.BAD_REQUEST);\n      });\n  }\n\n  async update(\n    id: number,\n    updateUserDto: UpdateUserDto,\n  ): Promise {\n    return this.userRepo.update(id, updateUserDto).catch(() => {\n      throw new HttpException(\n        \"Unable to update this user's information\",\n        HttpStatus.BAD_REQUEST,\n      );\n    });\n  }\n\n  async remove(id: number): Promise {\n    return this.userRepo.delete(id).catch(() => {\n      throw new HttpException('Unable to delete user', HttpStatus.BAD_REQUEST);\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/auth.type.ts\n            \n            interface\n            IRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guard/google.guard.ts\n            \n            injectable\n            GoogleAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/local.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategy/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/book/book.controller.ts\n            \n            controller\n            BookController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/book/book.entity.ts\n            \n            class\n            Book\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/book/book.service.ts\n            \n            injectable\n            BookService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/book/dto/create-book.dto.ts\n            \n            class\n            CreateBookDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/book/dto/update-book.dto.ts\n            \n            class\n            UpdateBookDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/category/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/length.ts\n            \n            class\n            LengthLimits\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/record/dto/create-record.dto.ts\n            \n            class\n            CreateRecordDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/record/dto/update-record.dto.ts\n            \n            class\n            UpdateRecordDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/record/record.controller.ts\n            \n            controller\n            RecordController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/record/record.entity.ts\n            \n            class\n            Record\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/record/record.service.ts\n            \n            injectable\n            RecordService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/role/role.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/role/role.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/role/role.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/signed-in.user.dto.ts\n            \n            class\n            SignedInUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/utils/exception-filter/exception.filter.ts\n            \n            class\n            ExceptionsFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/interceptor/excludeNull.interceptor.ts\n            \n            injectable\n            ExcludeNullInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utils/pagination/pagination.ts\n            \n            class\n            BookPagination\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/pagination/pagination.ts\n            \n            class\n            CategoryPagination\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/pagination/pagination.ts\n            \n            class\n            RecordPagination\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utils/pagination/pagination.ts\n            \n            class\n            UserPagination\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : ^0.4.1\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            mysql2 : ^2.2.5\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.0.0\n        \n            typeorm : ^0.2.32\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/role/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ yarn installRunning the app\n# development\n$ yarn start\n\n# watch mode\n$ yarn start:dev\n\n# production mode\n$ yarn start:prodTest\n# unit tests\n$ yarn test\n\n# e2e tests\n$ yarn test:e2e\n\n# test coverage\n$ yarn test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you\"d like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 Công Vũ\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecordModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BookModule\n\n\n\ncluster_BookModule_exports\n\n\n\ncluster_BookModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_exports\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_RecordModule\n\n\n\ncluster_RecordModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthModule \n\nAuthModule \n\nAuthModule  -->\n\nAuthModule->AuthModule \n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nBookModule\n\nBookModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nBookModule->CategoryModule\n\n\n\nAppModule -->\n\nBookModule->AppModule\n\n\n\n\n\nBookModule \n\nBookModule \n\nBookModule  -->\n\nBookModule->BookModule \n\n\n\n\n\nBookService \n\nBookService \n\nBookService  -->\n\nBookModule->BookService \n\n\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCategoryModule \n\nCategoryModule \n\nCategoryModule  -->\n\nCategoryModule->CategoryModule \n\n\n\n\n\nCategoryService \n\nCategoryService \n\nCategoryService  -->\n\nCategoryModule->CategoryService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nRecordModule\n\nRecordModule\n\nBookModule -->\n\nRecordModule->BookModule\n\n\n\nAppModule -->\n\nRecordModule->AppModule\n\n\n\n\n\nRecordModule \n\nRecordModule \n\nRecordModule  -->\n\nRecordModule->RecordModule \n\n\n\n\n\nRecordService \n\nRecordService \n\nRecordService  -->\n\nRecordModule->RecordService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nBookModule -->\n\nUserModule->BookModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserModule \n\nUserModule \n\nUserModule  -->\n\nUserModule->UserModule \n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\nBookModule -->\n\nUserService->BookModule\n\n\n\nCategoryModule -->\n\nUserService->CategoryModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nBookService\n\nBookService\n\nBookModule -->\n\nBookService->BookModule\n\n\n\nCategoryModule -->\n\nBookService->CategoryModule\n\n\n\n\n\nRecordService\n\nRecordService\n\nBookModule -->\n\nRecordService->BookModule\n\n\n\nCategoryModule -->\n\nRecordService->CategoryModule\n\n\n\nRecordModule -->\n\nRecordService->RecordModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    19 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthResponse   (src/.../auth.type.ts)\n                        \n                        \n                            JwtUser   (src/.../auth.type.ts)\n                        \n                        \n                            Payload   (src/.../auth.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.type.ts\n    \n    \n        \n            \n                \n                    \n                    AuthResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JwtUser\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Payload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../role.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/role/role.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'roles'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
